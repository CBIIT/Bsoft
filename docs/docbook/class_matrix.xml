<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_matrix" xml:lang="en-US">
<title>Matrix Class Reference</title>
<indexterm><primary>Matrix</primary></indexterm>
<para>
<computeroutput>#include &lt;Matrix.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_class_matrix_1_1_row">Row</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_matrix_1a2dba13c45127354c9f75ef576f49269b">Matrix</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_matrix_1a96c18f748b3df19500bf2f8c837ee5bc">Matrix</link> (const <link linkend="_class_matrix">Matrix</link> &amp;mat)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix_1a5eeb2558aca2aaa6ef90410a426a90db">Matrix</link> (long <link linkend="_class_matrix_1a04e6b05304b7df88c8e8c2a27fd5268f">rows</link>, long cols)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix_1a5306aa1f3fc22b71217bdedf0f9ba430">Matrix</link> (<link linkend="_class_bstring">Bstring</link> &amp;filename)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix_1a9b1c3627f573d78a2f08623fdfef990f">~Matrix</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_matrix_1aeff5336ad4273582a1ebb913f3804e9e">write</link> (<link linkend="_class_bstring">Bstring</link> &amp;filename)</para>
</listitem>
            <listitem><para>double * <link linkend="_class_matrix_1ae6d73d3b62282cc9318ba9fea7a528f5">data</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_matrix_1_1_row">Row</link> <link linkend="_class_matrix_1ae937df89736b190a50e318013bbdd8bb">operator[]</link> (long i)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix">Matrix</link> <link linkend="_class_matrix_1a2109d77149733b462b50982a528336ba">operator=</link> (const <link linkend="_class_matrix">Matrix</link> mat)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix">Matrix</link> <link linkend="_class_matrix_1aeeb01663c821db08857fc7ae58a67511">operator-</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_matrix">Matrix</link> <link linkend="_class_matrix_1a14764aa813f948f501fbd39c471411fb">operator*</link> (<link linkend="_class_matrix">Matrix</link> &amp;mat)</para>
</listitem>
            <listitem><para>vector&lt; double &gt; <link linkend="_class_matrix_1ac9cd0bd22848f4ec4cbbd0142363ea2f">operator*</link> (vector&lt; double &gt; &amp;vec)</para>
</listitem>
            <listitem><para>long <link linkend="_class_matrix_1a04e6b05304b7df88c8e8c2a27fd5268f">rows</link> ()</para>
</listitem>
            <listitem><para>long <link linkend="_class_matrix_1a54b3fb21c99f8056254ca5e322f2bede">columns</link> ()</para>
</listitem>
            <listitem><para>long <link linkend="_class_matrix_1abd192f9b8c42811c0dc6384e09e5b1ba">size</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_matrix_1aec1f4778d64637ea536f6152f0890607">show_below_cutoff</link> (double d)</para>
</listitem>
            <listitem><para>void <link linkend="_class_matrix_1ab81bba673b1508e86c04358c7ca56cd6">swap_rows_columns</link> (long rc1, long rc2)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix">Matrix</link> <link linkend="_class_matrix_1a6fe2f1e529b3cdfd027b4aff82f19f34">delete_row_column</link> (long rc)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix">Matrix</link> <link linkend="_class_matrix_1a759661b75b9681f3a89ff75e27933b3a">transpose</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_matrix_1a90ec5d0bc0420f3054ca80f2f9bd8451">fill</link> (double v)</para>
</listitem>
            <listitem><para>int <link linkend="_class_matrix_1a4df9f5c5d0580b40b14167a2d52ba6b3">check_for_singularity</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_matrix_1a00ff4e77d40160c2d3c1f7082abff2c6">normalize</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_matrix_1ac240c55c0d61c3667f645a32d22ff1c3">randomize</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_matrix_1a8a334d653308c47c228c9b455ce38b31">multiply_in_place</link> (vector&lt; double &gt; &amp;vec)</para>
</listitem>
            <listitem><para>double <link linkend="_class_matrix_1ad25e605a990b5134d2d2885cb18014c5">determinant</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_matrix_1a3b64bfdb20d2ea58aedc17ecdfedb7ff">LU_decomposition</link> ()</para>

<para><link linkend="_class_matrix">Matrix</link> inversion by LU decomposition. </para>
</listitem>
            <listitem><para>double <link linkend="_class_matrix_1a603e046d82d0e3f7af6f6c52a2ab19c0">LU_decomposition</link> (vector&lt; double &gt; &amp;b)</para>
</listitem>
            <listitem><para>double <link linkend="_class_matrix_1ac43ccb8336c73630b5cd0360146c02d4">singular_value_decomposition</link> ()</para>

<para>Singular value decomposition of a matrix . </para>
</listitem>
            <listitem><para>double <link linkend="_class_matrix_1a316af39eafdea7119bf46476692ad018">singular_value_decomposition</link> (vector&lt; double &gt; &amp;b)</para>
</listitem>
            <listitem><para>int <link linkend="_class_matrix_1adfeb7dcef99b8d90a41f03dcac8be652">jrotate</link> (double s, double tau, long i, long j, long k, long l)</para>
</listitem>
            <listitem><para>vector&lt; double &gt; <link linkend="_class_matrix_1ae6b0019ff0c6325cc219fd47b510871f">jacobi_rotation</link> ()</para>

<para>Computes all eigenvalues and eigenvectors of a real symmetric matrix. </para>
</listitem>
            <listitem><para>void <link linkend="_class_matrix_1a98f6d0dd469e5be3d9565773f0b58c4d">eigen_sort</link> (vector&lt; double &gt; &amp;val)</para>

<para>Computes all eigenvalues and eigenvectors of a real symmetric matrix. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line 21 of file Matrix.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_matrix_1a2dba13c45127354c9f75ef576f49269b"/>    <section>
    <title>Matrix()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>Matrix</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>Matrix</secondary></indexterm>
<para><computeroutput>Matrix::Matrix ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 40 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1a96c18f748b3df19500bf2f8c837ee5bc"/>    <section>
    <title>Matrix()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>Matrix</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>Matrix</secondary></indexterm>
<para><computeroutput>Matrix::Matrix (const <link linkend="_class_matrix">Matrix</link> &amp; mat)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 41 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1a5eeb2558aca2aaa6ef90410a426a90db"/>    <section>
    <title>Matrix()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>Matrix</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>Matrix</secondary></indexterm>
<para><computeroutput>Matrix::Matrix (long rows, long cols)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 45 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1a5306aa1f3fc22b71217bdedf0f9ba430"/>    <section>
    <title>Matrix()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>Matrix</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>Matrix</secondary></indexterm>
<para><computeroutput>Matrix::Matrix (<link linkend="_class_bstring">Bstring</link> &amp; filename)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 48 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1a9b1c3627f573d78a2f08623fdfef990f"/>    <section>
    <title>~Matrix()</title>
<indexterm><primary>~Matrix</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>~Matrix</secondary></indexterm>
<para><computeroutput>Matrix::~Matrix ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 93 of file Matrix.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_matrix_1a4df9f5c5d0580b40b14167a2d52ba6b3"/>    <section>
    <title>check_for_singularity()</title>
<indexterm><primary>check_for_singularity</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>check_for_singularity</secondary></indexterm>
<para><computeroutput>int Matrix::check_for_singularity ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 211 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1a54b3fb21c99f8056254ca5e322f2bede"/>    <section>
    <title>columns()</title>
<indexterm><primary>columns</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>columns</secondary></indexterm>
<para><computeroutput>long Matrix::columns ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 169 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1ae6d73d3b62282cc9318ba9fea7a528f5"/>    <section>
    <title>data()</title>
<indexterm><primary>data</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>data</secondary></indexterm>
<para><computeroutput>double* Matrix::data ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 111 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1a6fe2f1e529b3cdfd027b4aff82f19f34"/>    <section>
    <title>delete_row_column()</title>
<indexterm><primary>delete_row_column</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>delete_row_column</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix">Matrix</link> Matrix::delete_row_column (long rc)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 188 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1ad25e605a990b5134d2d2885cb18014c5"/>    <section>
    <title>determinant()</title>
<indexterm><primary>determinant</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>determinant</secondary></indexterm>
<para><computeroutput>double Matrix::determinant ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 270 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1a98f6d0dd469e5be3d9565773f0b58c4d"/>    <section>
    <title>eigen_sort()</title>
<indexterm><primary>eigen_sort</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>eigen_sort</secondary></indexterm>
<para><computeroutput>void Matrix::eigen_sort (vector&lt; double &gt; &amp; val)</computeroutput></para><para>

<para>Computes all eigenvalues and eigenvectors of a real symmetric matrix. </para>
</para>

<para><formalpara><title>Returns</title>

<para>double* val eigenvalues.</para>
</formalpara>
The eigenvectors are returned in the columns of the input matrix. Reference: Press W.H. et al (1992) Numerical Recipes in C.</para>

<para>Sorts eigenvalues into descending order and rearranges matrix columns accordingly. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>val</entry>
                                <entry>
<para>eigenvalues. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>void . <literallayout><computeroutput>The eigenvectors are in the columns.
This method uses straight insertion.
</computeroutput></literallayout> Reference: Press W.H. et al (1992) Numerical Recipes in C. </para>
</formalpara>
</para>
<para>
Definition at line 677 of file matrix.cpp.</para>
    </section><anchor xml:id="_class_matrix_1a90ec5d0bc0420f3054ca80f2f9bd8451"/>    <section>
    <title>fill()</title>
<indexterm><primary>fill</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>fill</secondary></indexterm>
<para><computeroutput>void Matrix::fill (double v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 209 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1ae6b0019ff0c6325cc219fd47b510871f"/>    <section>
    <title>jacobi_rotation()</title>
<indexterm><primary>jacobi_rotation</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>jacobi_rotation</secondary></indexterm>
<para><computeroutput>vector&lt; double &gt; Matrix::jacobi_rotation ( )</computeroutput></para><para>

<para>Computes all eigenvalues and eigenvectors of a real symmetric matrix. </para>
</para>

<para><formalpara><title>Returns</title>

<para>double* val eigenvalues.</para>
</formalpara>
The eigenvectors are returned in the columns of the input matrix. Reference: Press W.H. et al (1992) Numerical Recipes in C. </para>
<para>
Definition at line 421 of file matrix.cpp.</para>
    </section><anchor xml:id="_class_matrix_1adfeb7dcef99b8d90a41f03dcac8be652"/>    <section>
    <title>jrotate()</title>
<indexterm><primary>jrotate</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>jrotate</secondary></indexterm>
<para><computeroutput>int Matrix::jrotate (double s, double tau, long i, long j, long k, long l)</computeroutput></para><para>
Definition at line 394 of file matrix.cpp.</para>
    </section><anchor xml:id="_class_matrix_1a3b64bfdb20d2ea58aedc17ecdfedb7ff"/>    <section>
    <title>LU_decomposition()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>LU_decomposition</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>LU_decomposition</secondary></indexterm>
<para><computeroutput>double Matrix::LU_decomposition ( )</computeroutput></para><para>

<para><link linkend="_class_matrix">Matrix</link> inversion by LU decomposition. </para>
</para>

<para><formalpara><title>Returns</title>

<para>double determinant. <literallayout><computeroutput>This inverts matrix A by LU decomposition.
The matrix A must be square and is converted to and replaced by its inverse.
Note: The matrix is modified.
</computeroutput></literallayout> Reference: Press W.H. et al (1992) Numerical Recipes in C. </para>
</formalpara>
</para>
<para>
Definition at line 78 of file matrix.cpp.</para>
    </section><anchor xml:id="_class_matrix_1a603e046d82d0e3f7af6f6c52a2ab19c0"/>    <section>
    <title>LU_decomposition()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>LU_decomposition</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>LU_decomposition</secondary></indexterm>
<para><computeroutput>double Matrix::LU_decomposition (vector&lt; double &gt; &amp; b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 277 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1a8a334d653308c47c228c9b455ce38b31"/>    <section>
    <title>multiply_in_place()</title>
<indexterm><primary>multiply_in_place</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>multiply_in_place</secondary></indexterm>
<para><computeroutput>int Matrix::multiply_in_place (vector&lt; double &gt; &amp; vec)</computeroutput></para><para>
Definition at line 49 of file matrix.cpp.</para>
    </section><anchor xml:id="_class_matrix_1a00ff4e77d40160c2d3c1f7082abff2c6"/>    <section>
    <title>normalize()</title>
<indexterm><primary>normalize</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>normalize</secondary></indexterm>
<para><computeroutput>void Matrix::normalize ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>The rows and columns are alternatively iteratively normalized until the error is small enough. </para>
<para>
Definition at line 225 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1a14764aa813f948f501fbd39c471411fb"/>    <section>
    <title>operator*()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>operator*</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix">Matrix</link> Matrix::operator* (<link linkend="_class_matrix">Matrix</link> &amp; mat)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 143 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1ac9cd0bd22848f4ec4cbbd0142363ea2f"/>    <section>
    <title>operator*()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>operator*</secondary></indexterm>
<para><computeroutput>vector&lt;double&gt; Matrix::operator* (vector&lt; double &gt; &amp; vec)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 155 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1aeeb01663c821db08857fc7ae58a67511"/>    <section>
    <title>operator-()</title>
<indexterm><primary>operator-</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix">Matrix</link> Matrix::operator- ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 138 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1a2109d77149733b462b50982a528336ba"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix">Matrix</link> Matrix::operator= (const <link linkend="_class_matrix">Matrix</link> mat)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 131 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1ae937df89736b190a50e318013bbdd8bb"/>    <section>
    <title>operator[]()</title>
<indexterm><primary>operator[]</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix_1_1_row">Row</link> Matrix::operator[] (long i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 126 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1ac240c55c0d61c3667f645a32d22ff1c3"/>    <section>
    <title>randomize()</title>
<indexterm><primary>randomize</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>randomize</secondary></indexterm>
<para><computeroutput>void Matrix::randomize ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 260 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1a04e6b05304b7df88c8e8c2a27fd5268f"/>    <section>
    <title>rows()</title>
<indexterm><primary>rows</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>rows</secondary></indexterm>
<para><computeroutput>long Matrix::rows ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 168 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1aec1f4778d64637ea536f6152f0890607"/>    <section>
    <title>show_below_cutoff()</title>
<indexterm><primary>show_below_cutoff</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>show_below_cutoff</secondary></indexterm>
<para><computeroutput>void Matrix::show_below_cutoff (double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 172 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1ac43ccb8336c73630b5cd0360146c02d4"/>    <section>
    <title>singular_value_decomposition()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>singular_value_decomposition</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>singular_value_decomposition</secondary></indexterm>
<para><computeroutput>double Matrix::singular_value_decomposition ( )</computeroutput></para><para>

<para>Singular value decomposition of a matrix . </para>
</para>

<para><formalpara><title>Returns</title>

<para>double* 0.</para>
</formalpara>
The matrix A is replaced by the matrix U. Reference: Press W.H. et al (1992) Numerical Recipes in C. </para>
<para>
Definition at line 177 of file matrix.cpp.</para>
    </section><anchor xml:id="_class_matrix_1a316af39eafdea7119bf46476692ad018"/>    <section>
    <title>singular_value_decomposition()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>singular_value_decomposition</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>singular_value_decomposition</secondary></indexterm>
<para><computeroutput>double Matrix::singular_value_decomposition (vector&lt; double &gt; &amp; b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 288 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1abd192f9b8c42811c0dc6384e09e5b1ba"/>    <section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>size</secondary></indexterm>
<para><computeroutput>long Matrix::size ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 170 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1ab81bba673b1508e86c04358c7ca56cd6"/>    <section>
    <title>swap_rows_columns()</title>
<indexterm><primary>swap_rows_columns</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>swap_rows_columns</secondary></indexterm>
<para><computeroutput>void Matrix::swap_rows_columns (long rc1, long rc2)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 182 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1a759661b75b9681f3a89ff75e27933b3a"/>    <section>
    <title>transpose()</title>
<indexterm><primary>transpose</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>transpose</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix">Matrix</link> Matrix::transpose ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 201 of file Matrix.h.</para>
    </section><anchor xml:id="_class_matrix_1aeff5336ad4273582a1ebb913f3804e9e"/>    <section>
    <title>write()</title>
<indexterm><primary>write</primary><secondary>Matrix</secondary></indexterm>
<indexterm><primary>Matrix</primary><secondary>write</secondary></indexterm>
<para><computeroutput>void Matrix::write (<link linkend="_class_bstring">Bstring</link> &amp; filename)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 95 of file Matrix.h.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
/Users/bernard/b20/bsoft/include/<link linkend="__matrix_8h">Matrix.h</link>/Users/bernard/b20/bsoft/src/util/<link linkend="_matrix_8cpp">matrix.cpp</link></section>
</section>
