<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_vector3" xml:lang="en-US">
<title>Vector3&lt; Type &gt; Class Template Reference</title>
<indexterm><primary>Vector3&lt; Type &gt;</primary></indexterm>
<para>

<para>Vector class for 3-value vectors used in 3D space. The internal variables are an array of 3 numbers. </para>
 
</para>
<para>
<computeroutput>#include &lt;Vector3.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_vector3_1a81a4540f8c125b0dd4ce33c5ca4a160d">Vector3</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_vector3_1a5e0eba6a1cbd246e3079ce62dce10bb1">Vector3</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3_1a5b9b546531d713c37892a5c1be43f128">Vector3</link> (const Type x, const Type y, const Type z)</para>
</listitem>
            <listitem><para>template&lt;typename T2 &gt; </para><para><link linkend="_class_vector3_1a3dc46cf23679d8ca86acac73b1aecb75">Vector3</link> (const vector&lt; T2 &gt; &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a085a42ec2bfe91bace75ebb34b425231">operator=</link> (const Type d)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1aec6a29010c2d68f9e797d31678f27a46">operator=</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para>template&lt;typename T2 &gt; </para><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a4c3933ffedacd0e24c404c0e8f81bced">operator=</link> (const vector&lt; T2 &gt; &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1ac29c23330615e0fb8ae23ed62c6e1103">operator-</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1ab10bb6b220c829c72894bbc2f48f81a6">operator+=</link> (const double d)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a4d28228b27f7bf7539af13f4bca34dff">operator+</link> (const double d)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1aabaf7049a28b4691228c401d7cea18af">operator+=</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a4b987a62da17e7c87002f8037db9017f">operator+</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a9d48861377cb89b91e9b3bce936adc10">operator-=</link> (const double d)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a1b000bb2e9dc98677f854d9e445e0493">operator-</link> (const double d)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1abf90055d49cb98e6dd98228a5eedb4a2">operator-=</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1ade50cdb40e327036ac4a0f0cb34bca57">operator-</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a1d508da4b8a6f3dd38704dae12105f25">operator*=</link> (const double d)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1ad1495b1860e8ea46e22b7e3249f2e62c">operator*</link> (const double d)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1ab7485c8749401cec01ccaf7cece126a2">operator*=</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a424ef365272f381e38f62df4da03dc01">operator*</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a2baba8b3f0ac0cee22ebe4ea30738944">operator/=</link> (const double d)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a5e428f470a78874ec395574fb6da48f0">operator/</link> (const double d)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1aab1698d7d9ff2b86123199d9db5ce896">operator/=</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a2b1252f16c71557295dedb347320d4af">operator/</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_vector3_1adbeb5cd21b066000ca6c32d6bed9865a">operator==</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_vector3_1ae60e0f3a7ce5c86d374cd25a4ff0ecc3">operator==</link> (const double d)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_vector3_1ac71252bef4c0e21d75a363fbf13b3e9d">operator!=</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_vector3_1a7e9ed5eba7b2b3d6e8a67aa1ae68ad35">operator&gt;</link> (const double d)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_vector3_1a6ba0deab221232aadbf0f6c523f156b6">operator&lt;</link> (const double d)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_vector3_1ac3ecd5bcc62423314ad21ff8b866597d">operator&gt;</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_vector3_1a572924e59bc74744b16c7a18c163a0a7">operator&lt;</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_vector3_1a93ca22f07229adb5b93fb92c26c6f353">operator&gt;=</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_vector3_1a90ea66bef8b2ecda1be77e0beefd9012">operator&lt;=</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para>Type <link linkend="_class_vector3_1a383b60125efcd87a0166c9635b5c5330">operator[]</link> (size_t i) const</para>
</listitem>
            <listitem><para>Type &amp; <link linkend="_class_vector3_1aea90be668c9f9ead71065d9ebabcb820">operator[]</link> (size_t i)</para>
</listitem>
            <listitem><para>template&lt;typename T2 &gt; </para><para><link linkend="_class_vector3_1a8c3b08d61f1f80f0d0c7d12ba36af643">operator Vector3&lt; T2 &gt;</link> () const</para>
</listitem>
            <listitem><para>vector&lt; double &gt; <link linkend="_class_vector3_1a0506ffc8f8e4cdb7d3d9d554b5cb4306">array</link> ()</para>
</listitem>
            <listitem><para>Type <link linkend="_class_vector3_1ac1166913ef9d2cf5a357e8eb6ce33a5f">min</link> ()</para>
</listitem>
            <listitem><para>Type <link linkend="_class_vector3_1aed85cb656b417c4955c47a7c78450c8a">max</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a94587f6a1f1212a6d1d452e3ef1c8fce">min</link> (const double d)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a4f17f0deca9e01e5f945a3a56cfacbd8">max</link> (const double d)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1ab17e63af984696dfbc3df4ddef6ca9ae">min</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a7a6400a48da892821ee2c36500686b05">max</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a6ec8a3f610041e987924b7211366b24b">abs</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1aca4f522c1e23e9d7a54b6d3baabbaa86">floor</link> (int places)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a8179f82ecd22483efab167a6e754364b">round</link> (int places)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a9a8ff4366f417a13033ce5d00046dff4">remainder</link> (int divisor)</para>
</listitem>
            <listitem><para>double <link linkend="_class_vector3_1aadfc04bb5617510ab7c7e094b4ac1846">length2</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_vector3_1ae29d4fe2d6f1237eead404fea0abe92f">length</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_vector3_1a3d0eaf228dcfeb7933023151008bd89f">length</link> (double d)</para>
</listitem>
            <listitem><para>double <link linkend="_class_vector3_1af2949790ea4902d32e0d69a36426f6a6">distance</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para>double <link linkend="_class_vector3_1a7a5d07fe53328a358249728c6db6c381">distance2</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para>double <link linkend="_class_vector3_1ae45970417c148cc2e6015e7c95499059">distance_from_line2</link> (<link linkend="_class_vector3">Vector3</link> v1, <link linkend="_class_vector3">Vector3</link> v2)</para>
</listitem>
            <listitem><para>double <link linkend="_class_vector3_1a58dc92c7c61ee2efeb9a20729cfef35f">distance_from_line</link> (<link linkend="_class_vector3">Vector3</link> v1, <link linkend="_class_vector3">Vector3</link> v2)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a5dfd82877a02d432ea0f8f02378fd3a2">closest_point_on_line</link> (<link linkend="_class_vector3">Vector3</link> v1, <link linkend="_class_vector3">Vector3</link> v2)</para>
</listitem>
            <listitem><para>double <link linkend="_class_vector3_1a4605831783e06e0d35c0b19e2324626a">position_relative_to_line</link> (<link linkend="_class_vector3">Vector3</link> v1, <link linkend="_class_vector3">Vector3</link> v2)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a32aaf349f651501197becfb7e03cd021">square_root</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_vector3_1ab7cbc659a089fbee44d7f4caf27df159">sum</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_vector3_1a0ff3d7cde895ed2c0b4028e3db297bbd">volume</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_vector3_1aba4bd5a032489bb77d4a629573b5c018">normalize</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_vector3_1a3df5f6d3b25d2b13595c5ef1ac55b9f1">scalar</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v) const</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a85ee899fe290dd6bc961e03730946f94">cross</link> (const <link linkend="_class_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para>template&lt;typename T2 &gt; </para><para>double <link linkend="_class_vector3_1a41582da0c77502fd3cbcaa947168c6ca">angle</link> (<link linkend="_class_vector3">Vector3</link>&lt; T2 &gt; &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3_1a5389b0a6a10fdeda11357b4018a88dba">normal</link> (<link linkend="_class_vector3">Vector3</link> &amp;v1, <link linkend="_class_vector3">Vector3</link> &amp;v2)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_vector3_1a55554e360776458f488cc10fd313bdd3">finite</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_vector3_1a6f0ff08eb07aaeb464a8dc154a80fd6e">notfinite</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_vector3_1a71b3465179a4753b9f72eff6c7a64afa">within</link> (<link linkend="_class_vector3">Vector3</link> &amp;v1, <link linkend="_class_vector3">Vector3</link> &amp;v2)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Type&gt;
class Vector3&lt; Type &gt;</title></simplesect>


<para>Vector class for 3-value vectors used in 3D space. The internal variables are an array of 3 numbers. </para>
<para>
Definition at line 27 of file Vector3.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_vector3_1a81a4540f8c125b0dd4ce33c5ca4a160d"/>    <section>
    <title>Vector3()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>Vector3</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>Vector3</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::<link linkend="_class_vector3">Vector3</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 31 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a5e0eba6a1cbd246e3079ce62dce10bb1"/>    <section>
    <title>Vector3()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>Vector3</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>Vector3</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::<link linkend="_class_vector3">Vector3</link> (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 32 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a5b9b546531d713c37892a5c1be43f128"/>    <section>
    <title>Vector3()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>Vector3</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>Vector3</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::<link linkend="_class_vector3">Vector3</link> (const Type x, const Type y, const Type z)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 33 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a3dc46cf23679d8ca86acac73b1aecb75"/>    <section>
    <title>Vector3()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>Vector3</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>Vector3</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><computeroutput>template&lt;typename T2 &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::<link linkend="_class_vector3">Vector3</link> (const vector&lt; T2 &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 35 of file Vector3.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_vector3_1a6ec8a3f610041e987924b7211366b24b"/>    <section>
    <title>abs()</title>
<indexterm><primary>abs</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>abs</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::abs ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 201 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a41582da0c77502fd3cbcaa947168c6ca"/>    <section>
    <title>angle()</title>
<indexterm><primary>angle</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>angle</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><computeroutput>template&lt;typename T2 &gt; </computeroutput><para><computeroutput>double <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::angle (<link linkend="_class_vector3">Vector3</link>&lt; T2 &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 282 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a0506ffc8f8e4cdb7d3d9d554b5cb4306"/>    <section>
    <title>array()</title>
<indexterm><primary>array</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>array</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>vector&lt;double&gt; <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::array ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 166 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a5dfd82877a02d432ea0f8f02378fd3a2"/>    <section>
    <title>closest_point_on_line()</title>
<indexterm><primary>closest_point_on_line</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>closest_point_on_line</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::closest_point_on_line (<link linkend="_class_vector3">Vector3</link>&lt; Type &gt; v1, <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; v2)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 239 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a85ee899fe290dd6bc961e03730946f94"/>    <section>
    <title>cross()</title>
<indexterm><primary>cross</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>cross</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::cross (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 275 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1af2949790ea4902d32e0d69a36426f6a6"/>    <section>
    <title>distance()</title>
<indexterm><primary>distance</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>distance</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::distance (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 227 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a7a5d07fe53328a358249728c6db6c381"/>    <section>
    <title>distance2()</title>
<indexterm><primary>distance2</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>distance2</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::distance2 (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 228 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a58dc92c7c61ee2efeb9a20729cfef35f"/>    <section>
    <title>distance_from_line()</title>
<indexterm><primary>distance_from_line</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>distance_from_line</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::distance_from_line (<link linkend="_class_vector3">Vector3</link>&lt; Type &gt; v1, <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; v2)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 236 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1ae45970417c148cc2e6015e7c95499059"/>    <section>
    <title>distance_from_line2()</title>
<indexterm><primary>distance_from_line2</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>distance_from_line2</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::distance_from_line2 (<link linkend="_class_vector3">Vector3</link>&lt; Type &gt; v1, <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; v2)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 229 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a55554e360776458f488cc10fd313bdd3"/>    <section>
    <title>finite()</title>
<indexterm><primary>finite</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>finite</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::finite ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 299 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1aca4f522c1e23e9d7a54b6d3baabbaa86"/>    <section>
    <title>floor()</title>
<indexterm><primary>floor</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>floor</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::floor (int places)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 206 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1ae29d4fe2d6f1237eead404fea0abe92f"/>    <section>
    <title>length()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>length</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>length</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::length ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 222 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a3d0eaf228dcfeb7933023151008bd89f"/>    <section>
    <title>length()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>length</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>length</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>void <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::length (double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 223 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1aadfc04bb5617510ab7c7e094b4ac1846"/>    <section>
    <title>length2()</title>
<indexterm><primary>length2</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>length2</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::length2 ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 221 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1aed85cb656b417c4955c47a7c78450c8a"/>    <section>
    <title>max()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>max</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>max</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>Type <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::max ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 175 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a4f17f0deca9e01e5f945a3a56cfacbd8"/>    <section>
    <title>max()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>max</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>max</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::max (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 186 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a7a6400a48da892821ee2c36500686b05"/>    <section>
    <title>max()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>max</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>max</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::max (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 196 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1ac1166913ef9d2cf5a357e8eb6ce33a5f"/>    <section>
    <title>min()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>min</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>min</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>Type <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::min ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 169 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a94587f6a1f1212a6d1d452e3ef1c8fce"/>    <section>
    <title>min()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>min</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>min</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::min (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 181 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1ab17e63af984696dfbc3df4ddef6ca9ae"/>    <section>
    <title>min()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>min</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>min</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::min (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 191 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a5389b0a6a10fdeda11357b4018a88dba"/>    <section>
    <title>normal()</title>
<indexterm><primary>normal</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>normal</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::normal (<link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v1, <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v2)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 292 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1aba4bd5a032489bb77d4a629573b5c018"/>    <section>
    <title>normalize()</title>
<indexterm><primary>normalize</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>normalize</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::normalize ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 261 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a6f0ff08eb07aaeb464a8dc154a80fd6e"/>    <section>
    <title>notfinite()</title>
<indexterm><primary>notfinite</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>notfinite</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::notfinite ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 304 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a8c3b08d61f1f80f0d0c7d12ba36af643"/>    <section>
    <title>operator Vector3&lt; T2 &gt;()</title>
<indexterm><primary>operator Vector3&lt; T2 &gt;</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator Vector3&lt; T2 &gt;</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><computeroutput>template&lt;typename T2 &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator <link linkend="_class_vector3">Vector3</link>&lt; T2 &gt; ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 163 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1ac71252bef4c0e21d75a363fbf13b3e9d"/>    <section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator!= (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 126 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1ad1495b1860e8ea46e22b7e3249f2e62c"/>    <section>
    <title>operator*()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator* (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 86 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a424ef365272f381e38f62df4da03dc01"/>    <section>
    <title>operator*()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator* (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 94 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a1d508da4b8a6f3dd38704dae12105f25"/>    <section>
    <title>operator*=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator*=</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator*=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator*= (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 82 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1ab7485c8749401cec01ccaf7cece126a2"/>    <section>
    <title>operator*=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator*=</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator*=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator*= (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 90 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a4d28228b27f7bf7539af13f4bca34dff"/>    <section>
    <title>operator+()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator+ (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 54 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a4b987a62da17e7c87002f8037db9017f"/>    <section>
    <title>operator+()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator+ (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 62 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1ab10bb6b220c829c72894bbc2f48f81a6"/>    <section>
    <title>operator+=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator+= (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 50 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1aabaf7049a28b4691228c401d7cea18af"/>    <section>
    <title>operator+=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator+= (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 58 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1ac29c23330615e0fb8ae23ed62c6e1103"/>    <section>
    <title>operator-()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator- ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 46 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a1b000bb2e9dc98677f854d9e445e0493"/>    <section>
    <title>operator-()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator- (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 70 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1ade50cdb40e327036ac4a0f0cb34bca57"/>    <section>
    <title>operator-()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator- (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 78 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a9d48861377cb89b91e9b3bce936adc10"/>    <section>
    <title>operator-=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator-= (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 66 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1abf90055d49cb98e6dd98228a5eedb4a2"/>    <section>
    <title>operator-=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator-= (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 74 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a5e428f470a78874ec395574fb6da48f0"/>    <section>
    <title>operator/()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator/</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator/</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator/ (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 104 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a2b1252f16c71557295dedb347320d4af"/>    <section>
    <title>operator/()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator/</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator/</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator/ (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 112 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a2baba8b3f0ac0cee22ebe4ea30738944"/>    <section>
    <title>operator/=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator/=</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator/=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator/= (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 98 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1aab1698d7d9ff2b86123199d9db5ce896"/>    <section>
    <title>operator/=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator/=</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator/=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator/= (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 108 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a6ba0deab221232aadbf0f6c523f156b6"/>    <section>
    <title>operator&lt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator&lt; (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 136 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a572924e59bc74744b16c7a18c163a0a7"/>    <section>
    <title>operator&lt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator&lt; (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 146 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a90ea66bef8b2ecda1be77e0beefd9012"/>    <section>
    <title>operator&lt;=()</title>
<indexterm><primary>operator&lt;=</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator&lt;= (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 156 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a085a42ec2bfe91bace75ebb34b425231"/>    <section>
    <title>operator=()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator= (const Type d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 36 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1aec6a29010c2d68f9e797d31678f27a46"/>    <section>
    <title>operator=()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator= (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 37 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a4c3933ffedacd0e24c404c0e8f81bced"/>    <section>
    <title>operator=()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><computeroutput>template&lt;typename T2 &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator= (const vector&lt; T2 &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 42 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1ae60e0f3a7ce5c86d374cd25a4ff0ecc3"/>    <section>
    <title>operator==()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator== (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 121 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1adbeb5cd21b066000ca6c32d6bed9865a"/>    <section>
    <title>operator==()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator== (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 116 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a7e9ed5eba7b2b3d6e8a67aa1ae68ad35"/>    <section>
    <title>operator&gt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator&gt; (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 131 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1ac3ecd5bcc62423314ad21ff8b866597d"/>    <section>
    <title>operator&gt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator&gt; (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 141 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a93ca22f07229adb5b93fb92c26c6f353"/>    <section>
    <title>operator&gt;=()</title>
<indexterm><primary>operator&gt;=</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator&gt;= (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 151 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1aea90be668c9f9ead71065d9ebabcb820"/>    <section>
    <title>operator[]()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>Type&amp; <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator[] (size_t i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 162 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a383b60125efcd87a0166c9635b5c5330"/>    <section>
    <title>operator[]()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>Type <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::operator[] (size_t i) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 161 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a4605831783e06e0d35c0b19e2324626a"/>    <section>
    <title>position_relative_to_line()</title>
<indexterm><primary>position_relative_to_line</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>position_relative_to_line</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::position_relative_to_line (<link linkend="_class_vector3">Vector3</link>&lt; Type &gt; v1, <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; v2)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 245 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a9a8ff4366f417a13033ce5d00046dff4"/>    <section>
    <title>remainder()</title>
<indexterm><primary>remainder</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>remainder</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::remainder (int divisor)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 216 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a8179f82ecd22483efab167a6e754364b"/>    <section>
    <title>round()</title>
<indexterm><primary>round</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>round</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::round (int places)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 211 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a3df5f6d3b25d2b13595c5ef1ac55b9f1"/>    <section>
    <title>scalar()</title>
<indexterm><primary>scalar</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>scalar</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::scalar (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 272 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a32aaf349f651501197becfb7e03cd021"/>    <section>
    <title>square_root()</title>
<indexterm><primary>square_root</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>square_root</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link> <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::square_root ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 251 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1ab7cbc659a089fbee44d7f4caf27df159"/>    <section>
    <title>sum()</title>
<indexterm><primary>sum</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>sum</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::sum ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 259 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a0ff3d7cde895ed2c0b4028e3db297bbd"/>    <section>
    <title>volume()</title>
<indexterm><primary>volume</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>volume</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::volume ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 260 of file Vector3.h.</para>
    </section><anchor xml:id="_class_vector3_1a71b3465179a4753b9f72eff6c7a64afa"/>    <section>
    <title>within()</title>
<indexterm><primary>within</primary><secondary>Vector3&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Vector3&lt; Type &gt;</primary><secondary>within</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_vector3">Vector3</link>&lt; Type &gt;::within (<link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v1, <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; v2)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 309 of file Vector3.h.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
/Users/bernard/b20/bsoft/include/<link linkend="__quaternion_8h">Quaternion.h</link>/Users/bernard/b20/bsoft/include/<link linkend="__vector3_8h">Vector3.h</link></section>
</section>
