.TH "/Users/bernard/b20/bsoft/include/model_poly_spiral.h" 3 "Wed Sep 1 2021" "Version 2.1.0" "Bsoft" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/bernard/b20/bsoft/include/model_poly_spiral.h \- Functions to generate polyhedra using the spiral algorithm\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'rwmodel\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBBmodel\fP * \fBmodel_poly_spiral\fP (\fBBstring\fP &seq, int valence, int requirements)"
.br
.RI "Generates a polyhedron using the spiral algorithm\&. "
.ti -1c
.RI "int \fBmodel_polyhedron_check\fP (\fBBmodel\fP *\fBmodel\fP, int valence)"
.br
.RI "Checks a polyhedron for accuracy and completeness\&. "
.ti -1c
.RI "\fBBmodel\fP * \fBmodel_poly_gen_sequence\fP (\fBBstring\fP &seq, int valence, int enantiomorph, int requirements, int nm)"
.br
.RI "Generates a polyhedron using a given sequence\&. "
.ti -1c
.RI "\fBBmodel\fP * \fBmodel_poly_gen_sequence\fP (\fBBstring\fP &seq, int valence, int enantiomorph, int requirements, int nm, vector< double > &table)"
.br
.RI "Generates a polyhedron using a given sequence\&. "
.ti -1c
.RI "\fBBmodel\fP * \fBmodel_poly_gen_permutations\fP (int vertices, int valence, int enantiomorph)"
.br
.RI "All polyhedra are generated for a given number of vertices\&. "
.ti -1c
.RI "\fBBmodel\fP * \fBmodel_poly_gen_cone\fP (int tip, int body, int \fBbase\fP, int valence, int enantiomorph, int requirements)"
.br
.RI "A cone tip with 5 pentagons and a base with 7 pentagons are use to generate polyhedra\&. "
.ti -1c
.RI "\fBBmodel\fP * \fBmodel_poly_gen_lozenge\fP (int ttop, int tbody, int valence, int enantiomorph, int requirements)"
.br
.RI "Two icosahedral tips are set up and polyhedra generated by rotating the 2 tips\&. "
.ti -1c
.RI "\fBBmodel\fP * \fBmodel_poly_gen_coffin\fP (int ttop, int tbody, int tbase, int valence, int enantiomorph, int requirements)"
.br
.RI "An icosahedral tip and a 6-fold base is set up and polyhedra generated by rotating the tip and base\&. "
.ti -1c
.RI "\fBBmodel\fP * \fBmodel_poly_gen_coffin_loose\fP (int ttop, int tbody, int tbase, int valence, int enantiomorph, int requirements)"
.br
.RI "An icosahedral tip and a 6-fold base is set up and polyhedra generated by permuting the tip and base\&. "
.ti -1c
.RI "\fBBmodel\fP * \fBmodel_poly_gen_coffin_jiggle\fP (int ttop, int tbody, int tbase, int valence, int enantiomorph, int requirements)"
.br
.RI "An icosahedral tip and a 6-fold base is set up and polyhedra generated by moving pentagons around\&. "
.ti -1c
.RI "\fBBmodel\fP * \fBmodel_poly_gen_3part\fP (\fBBstring\fP stip, \fBBstring\fP sbody, \fBBstring\fP sbase, int valence, int enantiomorph, int requirements)"
.br
.RI "Generates several polyhedra by permuting the first and last parts of a three-part sequence\&. "
.ti -1c
.RI "\fBBmodel\fP * \fBmodel_poly_gen_move_pentagons\fP (\fBBstring\fP &seq, int valence, int enantiomorph, int requirements)"
.br
.RI "Generates many polyhedrons using a given sequence and moving pentagons around\&. "
.in -1c
.SH "Detailed Description"
.PP 
Functions to generate polyhedra using the spiral algorithm\&. 


.PP
\fBAuthor\fP
.RS 4
Bernard Heymann 
.RE
.PP
\fBDate\fP
.RS 4
Created: 20071127 
.PP
Modified: 20210124 
.RE
.PP

.PP
Definition in file \fBmodel_poly_spiral\&.h\fP\&.
.SH "Function Documentation"
.PP 
.SS "\fBBmodel\fP* model_poly_gen_3part (\fBBstring\fP stip, \fBBstring\fP sbody, \fBBstring\fP sbase, int valence, int enantiomorph, int requirements)"

.PP
Generates several polyhedra by permuting the first and last parts of a three-part sequence\&. 
.PP
\fBParameters\fP
.RS 4
\fIstip\fP tip sequence (permuted)\&. 
.br
\fIsbody\fP body sequence (all hexagons)\&. 
.br
\fIsbase\fP base/end sequence (permuted)\&. 
.br
\fIvalence\fP vertex valence\&. 
.br
\fIenantiomorph\fP flag to generate enantiomorphs\&. 
.br
\fIrequirements\fP polyhedron requirements\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Bmodel* new model, NULL if generation failed\&. 
.PP
.nf
A recursive algorithm is used to generate several models by shifting the
positions of pentagons in a sequence.

.fi
.PP
 
.RE
.PP

.PP
Definition at line 813 of file model_poly_spiral\&.cpp\&.
.SS "\fBBmodel\fP* model_poly_gen_coffin (int ttop, int tbody, int tbase, int valence, int enantiomorph, int requirements)"

.PP
An icosahedral tip and a 6-fold base is set up and polyhedra generated by rotating the tip and base\&. 
.PP
\fBParameters\fP
.RS 4
\fIttop\fP number of polygons between pentagons in the tip\&. 
.br
\fItbody\fP number of body rings\&. 
.br
\fItbase\fP number of polygons between pentagons in the base 
.br
\fIvalence\fP vertex valence\&. 
.br
\fIenantiomorph\fP flag to generate enantiomorphs\&. 
.br
\fIrequirements\fP polyhedron requirements\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Bmodel* new model, NULL if generation failed\&. 
.RE
.PP

.PP
Definition at line 672 of file model_poly_spiral\&.cpp\&.
.SS "\fBBmodel\fP* model_poly_gen_coffin_jiggle (int ttop, int tbody, int tbase, int valence, int enantiomorph, int requirements)"

.PP
An icosahedral tip and a 6-fold base is set up and polyhedra generated by moving pentagons around\&. 
.PP
\fBParameters\fP
.RS 4
\fIttop\fP number of polygons between pentagons in the tip\&. 
.br
\fItbody\fP number of body rings\&. 
.br
\fItbase\fP number of polygons between pentagons in the base 
.br
\fIvalence\fP vertex valence\&. 
.br
\fIenantiomorph\fP flag to generate enantiomorphs\&. 
.br
\fIrequirements\fP polyhedron requirements\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Bmodel* new model, NULL if generation failed\&. 
.RE
.PP

.PP
Definition at line 772 of file model_poly_spiral\&.cpp\&.
.SS "\fBBmodel\fP* model_poly_gen_coffin_loose (int ttop, int tbody, int tbase, int valence, int enantiomorph, int requirements)"

.PP
An icosahedral tip and a 6-fold base is set up and polyhedra generated by permuting the tip and base\&. 
.PP
\fBParameters\fP
.RS 4
\fIttop\fP number of polygons between pentagons in the tip\&. 
.br
\fItbody\fP number of body rings\&. 
.br
\fItbase\fP number of polygons between pentagons in the base 
.br
\fIvalence\fP vertex valence\&. 
.br
\fIenantiomorph\fP flag to generate enantiomorphs\&. 
.br
\fIrequirements\fP polyhedron requirements\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Bmodel* new model, NULL if generation failed\&. 
.RE
.PP

.PP
Definition at line 737 of file model_poly_spiral\&.cpp\&.
.SS "\fBBmodel\fP* model_poly_gen_cone (int tip, int body, int base, int valence, int enantiomorph, int requirements)"

.PP
A cone tip with 5 pentagons and a base with 7 pentagons are use to generate polyhedra\&. 
.PP
\fBParameters\fP
.RS 4
\fItip\fP number of vertices in the tip\&. 
.br
\fIbody\fP number of vertices in the body\&. 
.br
\fIbase\fP number of vertices in the base\&. 
.br
\fIvalence\fP vertex valence\&. 
.br
\fIenantiomorph\fP flag to generate enantiomorphs\&. 
.br
\fIrequirements\fP polyhedron requirements\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Bmodel* new model, NULL if generation failed\&. 
.RE
.PP

.PP
Definition at line 569 of file model_poly_spiral\&.cpp\&.
.SS "\fBBmodel\fP* model_poly_gen_lozenge (int ttop, int tbody, int valence, int enantiomorph, int requirements)"

.PP
Two icosahedral tips are set up and polyhedra generated by rotating the 2 tips\&. 
.PP
\fBParameters\fP
.RS 4
\fIttop\fP number of polygons between pentagons in the tip\&. 
.br
\fItbody\fP number of body rings\&. 
.br
\fIvalence\fP vertex valence\&. 
.br
\fIenantiomorph\fP flag to generate enantiomorphs\&. 
.br
\fIrequirements\fP polyhedron requirements\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Bmodel* new model, NULL if generation failed\&. 
.RE
.PP

.PP
Definition at line 607 of file model_poly_spiral\&.cpp\&.
.SS "\fBBmodel\fP* model_poly_gen_move_pentagons (\fBBstring\fP & seq, int valence, int enantiomorph, int requirements)"

.PP
Generates many polyhedrons using a given sequence and moving pentagons around\&. 
.PP
\fBParameters\fP
.RS 4
\fI&seq\fP polygon sequence\&. 
.br
\fIvalence\fP vertex valence\&. 
.br
\fIenantiomorph\fP flag to generate enantiomorphs\&. 
.br
\fIrequirements\fP polyhedron requirements\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Bmodel* new model, NULL if generation failed\&. 
.PP
.nf
A recursive algorithm is used to generate several models by shifting the
positions of pentagons in a sequence.

.fi
.PP
 
.RE
.PP

.PP
Definition at line 915 of file model_poly_spiral\&.cpp\&.
.SS "\fBBmodel\fP* model_poly_gen_permutations (int vertices, int valence, int enantiomorph)"

.PP
All polyhedra are generated for a given number of vertices\&. 
.PP
\fBParameters\fP
.RS 4
\fIvertices\fP number of vertices\&. 
.br
\fIvalence\fP vertex valence\&. 
.br
\fIenantiomorph\fP flag to generate enantiomorphs\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Bmodel* new model, NULL if generation failed\&. 
.RE
.PP

.PP
Definition at line 506 of file model_poly_spiral\&.cpp\&.
.SS "\fBBmodel\fP* model_poly_gen_sequence (\fBBstring\fP & seq, int valence, int enantiomorph, int requirements, int nm)"

.PP
Generates a polyhedron using a given sequence\&. 
.PP
\fBParameters\fP
.RS 4
\fI&seq\fP polygon sequence\&. 
.br
\fIvalence\fP vertex valence\&. 
.br
\fIenantiomorph\fP flag to generate enantiomorphs\&. 
.br
\fIrequirements\fP polyhedron requirements\&. 
.br
\fInm\fP current number of models (before creating this one)\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Bmodel* new model, NULL if generation failed\&. 
.PP
.nf
A single model is generated based on the sequence.

.fi
.PP
 
.RE
.PP

.PP
Definition at line 407 of file model_poly_spiral\&.cpp\&.
.SS "\fBBmodel\fP* model_poly_gen_sequence (\fBBstring\fP & seq, int valence, int enantiomorph, int requirements, int nm, vector< double > & table)"

.PP
Generates a polyhedron using a given sequence\&. 
.PP
\fBParameters\fP
.RS 4
\fI&seq\fP polygon sequence\&. 
.br
\fIvalence\fP vertex valence\&. 
.br
\fIenantiomorph\fP flag to generate enantiomorphs\&. 
.br
\fIrequirements\fP polyhedron requirements\&. 
.br
\fInm\fP current number of models (before creating this one)\&. 
.br
\fI&table\fP table for sets of eigenvalues\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Bmodel* new model, NULL if generation failed\&. 
.PP
.nf
A single model is generated based on the sequence.
A table is used to keep track of sets of eigenvalues of previous models
to avoid generating redundant models.

.fi
.PP
 
.RE
.PP

.PP
Definition at line 429 of file model_poly_spiral\&.cpp\&.
.SS "\fBBmodel\fP* model_poly_spiral (\fBBstring\fP & seq, int valence, int requirements)"

.PP
Generates a polyhedron using the spiral algorithm\&. 
.PP
\fBParameters\fP
.RS 4
\fI&seq\fP polygon sequence\&. 
.br
\fIvalence\fP vertex valence\&. 
.br
\fIrequirements\fP polyhedron requirements\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Bmodel* new model, NULL if generation failed\&. 
.PP
.nf
Polygons are added based on the given sequence.
The success of the algorithm is checked using the indicated requirements:
    0       only a polyhedron consistency check is done
    1       the exact number of vertices must be obtained
    2       only a polyhedron with isolated pentagons is accepted
The generation fails when an incorrect number of vertices are added
or some of the vertices have incorrect valency.

.fi
.PP
 
.RE
.PP

.PP
Definition at line 275 of file model_poly_spiral\&.cpp\&.
.SS "int model_polyhedron_check (\fBBmodel\fP * model, int valence)"

.PP
Checks a polyhedron for accuracy and completeness\&. 
.PP
\fBParameters\fP
.RS 4
\fI*model\fP model structure\&. 
.br
\fIvalence\fP vertex valence\&. 
.RE
.PP
\fBReturns\fP
.RS 4
int number of failed conditions\&. 
.PP
.nf
Every component must have the required number of links = valence.
Every component must have the required number of polygons = valence.
The polyhedron must adhere to Euler's formula:
    components + polygons - links = 2

.fi
.PP
 
.RE
.PP

.PP
Definition at line 344 of file model_poly_spiral\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Bsoft from the source code\&.
