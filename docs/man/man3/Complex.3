.TH "Complex< Type >" 3 "Wed Sep 1 2021" "Version 2.1.0" "Bsoft" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Complex< Type >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Complex\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBComplex\fP ()"
.br
.ti -1c
.RI "\fBComplex\fP (const \fBComplex\fP &c)"
.br
.ti -1c
.RI "\fBComplex\fP (const Type r)"
.br
.ti -1c
.RI "\fBComplex\fP (const Type r, const Type i)"
.br
.ti -1c
.RI "\fBComplex\fP \fBoperator=\fP (const double &d)"
.br
.ti -1c
.RI "\fBComplex\fP \fBoperator=\fP (const \fBComplex\fP &c)"
.br
.ti -1c
.RI "\fBComplex\fP \fBoperator\-\fP ()"
.br
.ti -1c
.RI "\fBComplex\fP \fBoperator+=\fP (const \fBComplex\fP &c)"
.br
.ti -1c
.RI "\fBComplex\fP \fBoperator+\fP (const \fBComplex\fP &c)"
.br
.ti -1c
.RI "\fBComplex\fP \fBoperator\-=\fP (const \fBComplex\fP &c)"
.br
.ti -1c
.RI "\fBComplex\fP \fBoperator\-\fP (const \fBComplex\fP &c)"
.br
.ti -1c
.RI "\fBComplex\fP \fBoperator*=\fP (const double d)"
.br
.ti -1c
.RI "\fBComplex\fP \fBoperator*=\fP (const \fBComplex\fP &c)"
.br
.ti -1c
.RI "\fBComplex\fP \fBoperator*\fP (const double d)"
.br
.ti -1c
.RI "\fBComplex\fP \fBoperator*\fP (const \fBComplex\fP &c)"
.br
.ti -1c
.RI "\fBComplex\fP \fBoperator/=\fP (const double d)"
.br
.ti -1c
.RI "\fBComplex\fP \fBoperator/=\fP (const \fBComplex\fP &c)"
.br
.ti -1c
.RI "\fBComplex\fP \fBoperator/\fP (const double d)"
.br
.ti -1c
.RI "\fBComplex\fP \fBoperator/\fP (const \fBComplex\fP &c)"
.br
.ti -1c
.RI "Type & \fBoperator[]\fP (const int i)"
.br
.ti -1c
.RI "template<typename T2 > \fBoperator Complex< T2 >\fP () const"
.br
.ti -1c
.RI "bool \fBis_finite\fP ()"
.br
.ti -1c
.RI "Type \fBreal\fP ()"
.br
.ti -1c
.RI "Type \fBimag\fP ()"
.br
.ti -1c
.RI "double \fBpower\fP ()"
.br
.ti -1c
.RI "double \fBamp\fP ()"
.br
.ti -1c
.RI "double \fBphi\fP ()"
.br
.ti -1c
.RI "\fBComplex\fP \fBconj\fP ()"
.br
.ti -1c
.RI "void \fBset\fP (const double a, const double p)"
.br
.ti -1c
.RI "void \fBreal\fP (const Type d)"
.br
.ti -1c
.RI "void \fBimag\fP (const Type d)"
.br
.ti -1c
.RI "void \fBamp\fP (const double d)"
.br
.ti -1c
.RI "void \fBphi\fP (const double d)"
.br
.ti -1c
.RI "void \fBshift_phi\fP (const double d)"
.br
.ti -1c
.RI "\fBComplex\fP \fBunpack_first\fP (\fBComplex\fP c)"
.br
.ti -1c
.RI "\fBComplex\fP \fBunpack_second\fP (\fBComplex\fP c)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename Type>
.br
class Complex< Type >"

.PP
Definition at line 23 of file Complex\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename Type > \fBComplex\fP< Type >::\fBComplex\fP ()\fC [inline]\fP"

.PP
Definition at line 26 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP< Type >::\fBComplex\fP (const \fBComplex\fP< Type > & c)\fC [inline]\fP"

.PP
Definition at line 27 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP< Type >::\fBComplex\fP (const Type r)\fC [inline]\fP"

.PP
Definition at line 28 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP< Type >::\fBComplex\fP (const Type r, const Type i)\fC [inline]\fP"

.PP
Definition at line 29 of file Complex\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename Type > double \fBComplex\fP< Type >::amp ()\fC [inline]\fP"

.PP
Definition at line 104 of file Complex\&.h\&.
.SS "template<typename Type > void \fBComplex\fP< Type >::amp (const double d)\fC [inline]\fP"

.PP
Definition at line 110 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP \fBComplex\fP< Type >::conj ()\fC [inline]\fP"

.PP
Definition at line 106 of file Complex\&.h\&.
.SS "template<typename Type > Type \fBComplex\fP< Type >::imag ()\fC [inline]\fP"

.PP
Definition at line 102 of file Complex\&.h\&.
.SS "template<typename Type > void \fBComplex\fP< Type >::imag (const Type d)\fC [inline]\fP"

.PP
Definition at line 109 of file Complex\&.h\&.
.SS "template<typename Type > bool \fBComplex\fP< Type >::is_finite ()\fC [inline]\fP"

.PP
Definition at line 100 of file Complex\&.h\&.
.SS "template<typename Type > template<typename T2 > \fBComplex\fP< Type >::operator \fBComplex\fP< T2 > () const\fC [inline]\fP"

.PP
Definition at line 97 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP \fBComplex\fP< Type >::operator* (const \fBComplex\fP< Type > & c)\fC [inline]\fP"

.PP
Definition at line 72 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP \fBComplex\fP< Type >::operator* (const double d)\fC [inline]\fP"

.PP
Definition at line 69 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP \fBComplex\fP< Type >::operator*= (const \fBComplex\fP< Type > & c)\fC [inline]\fP"

.PP
Definition at line 64 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP \fBComplex\fP< Type >::operator*= (const double d)\fC [inline]\fP"

.PP
Definition at line 59 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP \fBComplex\fP< Type >::operator+ (const \fBComplex\fP< Type > & c)\fC [inline]\fP"

.PP
Definition at line 48 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP \fBComplex\fP< Type >::operator+= (const \fBComplex\fP< Type > & c)\fC [inline]\fP"

.PP
Definition at line 43 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP \fBComplex\fP< Type >::operator\- ()\fC [inline]\fP"

.PP
Definition at line 40 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP \fBComplex\fP< Type >::operator\- (const \fBComplex\fP< Type > & c)\fC [inline]\fP"

.PP
Definition at line 56 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP \fBComplex\fP< Type >::operator\-= (const \fBComplex\fP< Type > & c)\fC [inline]\fP"

.PP
Definition at line 51 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP \fBComplex\fP< Type >::operator/ (const \fBComplex\fP< Type > & c)\fC [inline]\fP"

.PP
Definition at line 90 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP \fBComplex\fP< Type >::operator/ (const double d)\fC [inline]\fP"

.PP
Definition at line 87 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP \fBComplex\fP< Type >::operator/= (const \fBComplex\fP< Type > & c)\fC [inline]\fP"

.PP
Definition at line 80 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP \fBComplex\fP< Type >::operator/= (const double d)\fC [inline]\fP"

.PP
Definition at line 75 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP \fBComplex\fP< Type >::operator= (const \fBComplex\fP< Type > & c)\fC [inline]\fP"

.PP
Definition at line 35 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP \fBComplex\fP< Type >::operator= (const double & d)\fC [inline]\fP"

.PP
Definition at line 30 of file Complex\&.h\&.
.SS "template<typename Type > Type& \fBComplex\fP< Type >::operator[] (const int i)\fC [inline]\fP"

.PP
Definition at line 96 of file Complex\&.h\&.
.SS "template<typename Type > double \fBComplex\fP< Type >::phi ()\fC [inline]\fP"

.PP
Definition at line 105 of file Complex\&.h\&.
.SS "template<typename Type > void \fBComplex\fP< Type >::phi (const double d)\fC [inline]\fP"

.PP
Definition at line 111 of file Complex\&.h\&.
.SS "template<typename Type > double \fBComplex\fP< Type >::power ()\fC [inline]\fP"

.PP
Definition at line 103 of file Complex\&.h\&.
.SS "template<typename Type > Type \fBComplex\fP< Type >::real ()\fC [inline]\fP"

.PP
Definition at line 101 of file Complex\&.h\&.
.SS "template<typename Type > void \fBComplex\fP< Type >::real (const Type d)\fC [inline]\fP"

.PP
Definition at line 108 of file Complex\&.h\&.
.SS "template<typename Type > void \fBComplex\fP< Type >::set (const double a, const double p)\fC [inline]\fP"

.PP
Definition at line 107 of file Complex\&.h\&.
.SS "template<typename Type > void \fBComplex\fP< Type >::shift_phi (const double d)\fC [inline]\fP"

.PP
Definition at line 112 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP \fBComplex\fP< Type >::unpack_first (\fBComplex\fP< Type > c)\fC [inline]\fP"

.PP
Definition at line 113 of file Complex\&.h\&.
.SS "template<typename Type > \fBComplex\fP \fBComplex\fP< Type >::unpack_second (\fBComplex\fP< Type > c)\fC [inline]\fP"

.PP
Definition at line 116 of file Complex\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Bsoft from the source code\&.
