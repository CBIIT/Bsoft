.TH "/Users/bernard/b20/bsoft/include/rwxml.h" 3 "Wed Sep 1 2021" "Version 2.1.0" "Bsoft" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/bernard/b20/bsoft/include/rwxml.h \- Reads and writes micrograph XML files\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <libxml/parser\&.h>\fP
.br
\fC#include <libxml/xmlschemas\&.h>\fP
.br
\fC#include 'Bstring\&.h'\fP
.br
\fC#include 'json\&.h'\fP
.br

.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef const char * \fBxmlFormat\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBxml_check_for_node\fP (xmlNodePtr parent, const char *tag)"
.br
.ti -1c
.RI "int \fBxml_check_for_node_in_tree\fP (xmlNodePtr parent, const char *tag)"
.br
.ti -1c
.RI "xmlNodePtr \fBxml_find_node\fP (xmlNodePtr parent, const char *tag)"
.br
.ti -1c
.RI "\fBBstring\fP \fBxml_copy_string\fP (xmlNodePtr parent, const char *tag)"
.br
.ti -1c
.RI "string \fBxml_get_string_attribute\fP (xmlNodePtr parent, const char *tag)"
.br
.ti -1c
.RI "long \fBxml_get_integer_attribute\fP (xmlNodePtr parent, const char *tag)"
.br
.ti -1c
.RI "double \fBxml_get_real_attribute\fP (xmlNodePtr parent, const char *tag)"
.br
.ti -1c
.RI "string \fBxml_get_string\fP (xmlNodePtr node)"
.br
.ti -1c
.RI "string \fBxml_get_string\fP (xmlNodePtr parent, const char *tag)"
.br
.ti -1c
.RI "long \fBxml_get_integer\fP (xmlNodePtr node)"
.br
.ti -1c
.RI "long \fBxml_get_integer\fP (xmlNodePtr parent, const char *tag)"
.br
.ti -1c
.RI "double \fBxml_get_real\fP (xmlNodePtr node)"
.br
.ti -1c
.RI "double \fBxml_get_real\fP (xmlNodePtr parent, const char *tag)"
.br
.ti -1c
.RI "xmlAttrPtr \fBxml_set_integer_attribute\fP (xmlNodePtr parent, const char *tag, long value, const char *format)"
.br
.ti -1c
.RI "xmlAttrPtr \fBxml_set_real_attribute\fP (xmlNodePtr parent, const char *tag, double value, const char *format)"
.br
.ti -1c
.RI "xmlNodePtr \fBxml_set_integer\fP (xmlNodePtr parent, const char *tag, long value, const char *format)"
.br
.ti -1c
.RI "xmlNodePtr \fBxml_set_real\fP (xmlNodePtr parent, const char *tag, double value, const char *format)"
.br
.ti -1c
.RI "int \fBxml_validate\fP (const xmlDocPtr doc, \fBBstring\fP &xsdfile)"
.br
.ti -1c
.RI "\fBJSvalue\fP \fBjson_from_xml\fP (const char *data)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Reads and writes micrograph XML files\&. 


.PP
\fBAuthor\fP
.RS 4
Bernard Heymann 
.RE
.PP
\fBDate\fP
.RS 4
Created: 20050920 
.PP
Modified: 20210615 
.RE
.PP

.PP
Definition in file \fBrwxml\&.h\fP\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef const char* \fBxmlFormat\fP"

.PP
Definition at line 17 of file rwxml\&.h\&.
.SH "Function Documentation"
.PP 
.SS "\fBJSvalue\fP json_from_xml (const char * data)"

.SS "int xml_check_for_node (xmlNodePtr parent, const char * tag)"

.SS "int xml_check_for_node_in_tree (xmlNodePtr parent, const char * tag)"

.SS "\fBBstring\fP xml_copy_string (xmlNodePtr parent, const char * tag)"

.SS "xmlNodePtr xml_find_node (xmlNodePtr parent, const char * tag)"

.SS "long xml_get_integer (xmlNodePtr node)"

.SS "long xml_get_integer (xmlNodePtr parent, const char * tag)"

.SS "long xml_get_integer_attribute (xmlNodePtr parent, const char * tag)"

.SS "double xml_get_real (xmlNodePtr node)"

.SS "double xml_get_real (xmlNodePtr parent, const char * tag)"

.SS "double xml_get_real_attribute (xmlNodePtr parent, const char * tag)"

.SS "string xml_get_string (xmlNodePtr node)"

.SS "string xml_get_string (xmlNodePtr parent, const char * tag)"

.SS "string xml_get_string_attribute (xmlNodePtr parent, const char * tag)"

.SS "xmlNodePtr xml_set_integer (xmlNodePtr parent, const char * tag, long value, const char * format)"

.SS "xmlAttrPtr xml_set_integer_attribute (xmlNodePtr parent, const char * tag, long value, const char * format)"

.SS "xmlNodePtr xml_set_real (xmlNodePtr parent, const char * tag, double value, const char * format)"

.SS "xmlAttrPtr xml_set_real_attribute (xmlNodePtr parent, const char * tag, double value, const char * format)"

.SS "int xml_validate (const xmlDocPtr doc, \fBBstring\fP & xsdfile)"

.SH "Author"
.PP 
Generated automatically by Doxygen for Bsoft from the source code\&.
