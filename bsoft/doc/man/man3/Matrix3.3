.TH "Matrix3" 3 "Wed Sep 1 2021" "Version 2.1.0" "Bsoft" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Matrix3
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Matrix3\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMatrix3\fP ()"
.br
.ti -1c
.RI "\fBMatrix3\fP (const double v)"
.br
.ti -1c
.RI "\fBMatrix3\fP (const double *v)"
.br
.ti -1c
.RI "\fBMatrix3\fP (const vector< double > &v)"
.br
.ti -1c
.RI "\fBMatrix3\fP (const double d0, const double d1, const double d2, const double d3, const double d4, const double d5, const double d6, const double d7, const double d8)"
.br
.ti -1c
.RI "\fBMatrix3\fP (const \fBMatrix3\fP &m)"
.br
.ti -1c
.RI "\fBMatrix3\fP (\fBQuaternion\fP q)"
.br
.ti -1c
.RI "template<typename T > \fBMatrix3\fP (\fBVector3\fP< T > axis, double \fBangle\fP)"
.br
.ti -1c
.RI "\fBMatrix3\fP (double tilt, double axis)"
.br
.ti -1c
.RI "template<typename Type1 , typename Type2 > \fBMatrix3\fP (\fBVector3\fP< Type1 > &from_vec, \fBVector3\fP< Type2 > &to_vec)"
.br
.ti -1c
.RI "\fBQuaternion\fP \fBquaternion\fP () const"
.br
.ti -1c
.RI "\fBVector3\fP< double > & \fBoperator[]\fP (long i)"
.br
.ti -1c
.RI "\fBMatrix3\fP \fBoperator=\fP (const \fBMatrix3\fP &m)"
.br
.ti -1c
.RI "\fBMatrix3\fP \fBoperator+=\fP (const \fBMatrix3\fP &m)"
.br
.ti -1c
.RI "\fBMatrix3\fP \fBoperator+\fP (const \fBMatrix3\fP &m)"
.br
.ti -1c
.RI "\fBMatrix3\fP \fBoperator\-=\fP (const \fBMatrix3\fP &m)"
.br
.ti -1c
.RI "\fBMatrix3\fP \fBoperator\-\fP (const \fBMatrix3\fP &m)"
.br
.ti -1c
.RI "\fBMatrix3\fP \fBoperator\-\fP ()"
.br
.ti -1c
.RI "\fBMatrix3\fP \fBoperator*=\fP (const \fBMatrix3\fP &m)"
.br
.ti -1c
.RI "\fBMatrix3\fP \fBoperator*\fP (const \fBMatrix3\fP &m)"
.br
.ti -1c
.RI "\fBMatrix3\fP \fBoperator*=\fP (const double v)"
.br
.ti -1c
.RI "\fBMatrix3\fP \fBoperator*\fP (const double v)"
.br
.ti -1c
.RI "\fBMatrix3\fP \fBoperator/=\fP (const double v)"
.br
.ti -1c
.RI "\fBMatrix3\fP \fBoperator/\fP (const double v)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBMatrix3\fP &m)"
.br
.ti -1c
.RI "template<typename T > \fBVector3\fP< T > \fBoperator*\fP (\fBVector3\fP< T > &v)"
.br
.ti -1c
.RI "template<typename T > vector< T > \fBoperator*\fP (vector< T > &v)"
.br
.ti -1c
.RI "template<typename T > \fBMatrix3\fP \fBoperator/=\fP (\fBVector3\fP< T > &v)"
.br
.ti -1c
.RI "template<typename T > \fBMatrix3\fP \fBoperator/\fP (\fBVector3\fP< T > &v)"
.br
.ti -1c
.RI "double \fBdeterminant\fP ()"
.br
.ti -1c
.RI "double \fBtrace\fP ()"
.br
.ti -1c
.RI "\fBMatrix3\fP \fBtranspose\fP () const"
.br
.ti -1c
.RI "void \fBnormalize\fP ()"
.br
.ti -1c
.RI "vector< double > \fBtilt_angles\fP ()"
.br
.ti -1c
.RI "\fBMatrix3\fP \fBrotation\fP (const \fBMatrix3\fP &mat)"
.br
.ti -1c
.RI "double \fBangle\fP (const \fBMatrix3\fP &mat)"
.br
.ti -1c
.RI "\fBVector3\fP< double > \fBplane_normal\fP (vector< double > &b)"
.br
.ti -1c
.RI "\fBVector3\fP< double > \fBplane_normal\fP (\fBVector3\fP< double > &b)"
.br
.ti -1c
.RI "\fBMatrix3\fP \fBLU_decomposition\fP (vector< double > &b)"
.br
.ti -1c
.RI "\fBMatrix3\fP \fBsingular_value_decomposition\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 17 of file Matrix3\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Matrix3::Matrix3 ()\fC [inline]\fP"

.PP
Definition at line 44 of file Matrix3\&.h\&.
.SS "Matrix3::Matrix3 (const double v)\fC [inline]\fP"

.PP
Definition at line 46 of file Matrix3\&.h\&.
.SS "Matrix3::Matrix3 (const double * v)\fC [inline]\fP"

.PP
Definition at line 47 of file Matrix3\&.h\&.
.SS "Matrix3::Matrix3 (const vector< double > & v)\fC [inline]\fP"

.PP
Definition at line 53 of file Matrix3\&.h\&.
.SS "Matrix3::Matrix3 (const double d0, const double d1, const double d2, const double d3, const double d4, const double d5, const double d6, const double d7, const double d8)\fC [inline]\fP"

.PP
Definition at line 59 of file Matrix3\&.h\&.
.SS "Matrix3::Matrix3 (const \fBMatrix3\fP & m)\fC [inline]\fP"

.PP
Definition at line 66 of file Matrix3\&.h\&.
.SS "Matrix3::Matrix3 (\fBQuaternion\fP q)\fC [inline]\fP"

.PP
Definition at line 68 of file Matrix3\&.h\&.
.SS "template<typename T > Matrix3::Matrix3 (\fBVector3\fP< T > axis, double angle)\fC [inline]\fP"

.PP
Definition at line 73 of file Matrix3\&.h\&.
.SS "Matrix3::Matrix3 (double tilt, double axis)\fC [inline]\fP"

.PP
Definition at line 78 of file Matrix3\&.h\&.
.SS "template<typename Type1 , typename Type2 > Matrix3::Matrix3 (\fBVector3\fP< Type1 > & from_vec, \fBVector3\fP< Type2 > & to_vec)\fC [inline]\fP"

.PP
Definition at line 85 of file Matrix3\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "double Matrix3::angle (const \fBMatrix3\fP & mat)\fC [inline]\fP"

.PP
Definition at line 333 of file Matrix3\&.h\&.
.SS "double Matrix3::determinant ()\fC [inline]\fP"

.PP
Definition at line 265 of file Matrix3\&.h\&.
.SS "\fBMatrix3\fP Matrix3::LU_decomposition (vector< double > & b)\fC [inline]\fP"

.PP
Definition at line 360 of file Matrix3\&.h\&.
.SS "void Matrix3::normalize ()\fC [inline]\fP"

.PP
Definition at line 299 of file Matrix3\&.h\&.
.SS "\fBMatrix3\fP Matrix3::operator* (const double v)\fC [inline]\fP"

.PP
Definition at line 223 of file Matrix3\&.h\&.
.SS "\fBMatrix3\fP Matrix3::operator* (const \fBMatrix3\fP & m)\fC [inline]\fP"

.PP
Definition at line 201 of file Matrix3\&.h\&.
.SS "template<typename T > \fBVector3\fP<T> Matrix3::operator* (\fBVector3\fP< T > & v)\fC [inline]\fP"

.PP
Definition at line 243 of file Matrix3\&.h\&.
.SS "template<typename T > vector<T> Matrix3::operator* (vector< T > & v)\fC [inline]\fP"

.PP
Definition at line 249 of file Matrix3\&.h\&.
.SS "\fBMatrix3\fP Matrix3::operator*= (const double v)\fC [inline]\fP"

.PP
Definition at line 219 of file Matrix3\&.h\&.
.SS "\fBMatrix3\fP Matrix3::operator*= (const \fBMatrix3\fP & m)\fC [inline]\fP"

.PP
Definition at line 197 of file Matrix3\&.h\&.
.SS "\fBMatrix3\fP Matrix3::operator+ (const \fBMatrix3\fP & m)\fC [inline]\fP"

.PP
Definition at line 180 of file Matrix3\&.h\&.
.SS "\fBMatrix3\fP Matrix3::operator+= (const \fBMatrix3\fP & m)\fC [inline]\fP"

.PP
Definition at line 176 of file Matrix3\&.h\&.
.SS "\fBMatrix3\fP Matrix3::operator\- ()\fC [inline]\fP"

.PP
Definition at line 192 of file Matrix3\&.h\&.
.SS "\fBMatrix3\fP Matrix3::operator\- (const \fBMatrix3\fP & m)\fC [inline]\fP"

.PP
Definition at line 188 of file Matrix3\&.h\&.
.SS "\fBMatrix3\fP Matrix3::operator\-= (const \fBMatrix3\fP & m)\fC [inline]\fP"

.PP
Definition at line 184 of file Matrix3\&.h\&.
.SS "\fBMatrix3\fP Matrix3::operator/ (const double v)\fC [inline]\fP"

.PP
Definition at line 232 of file Matrix3\&.h\&.
.SS "template<typename T > \fBMatrix3\fP Matrix3::operator/ (\fBVector3\fP< T > & v)\fC [inline]\fP"

.PP
Definition at line 261 of file Matrix3\&.h\&.
.SS "\fBMatrix3\fP Matrix3::operator/= (const double v)\fC [inline]\fP"

.PP
Definition at line 228 of file Matrix3\&.h\&.
.SS "template<typename T > \fBMatrix3\fP Matrix3::operator/= (\fBVector3\fP< T > & v)\fC [inline]\fP"

.PP
Definition at line 256 of file Matrix3\&.h\&.
.SS "\fBMatrix3\fP Matrix3::operator= (const \fBMatrix3\fP & m)\fC [inline]\fP"

.PP
Definition at line 172 of file Matrix3\&.h\&.
.SS "bool Matrix3::operator== (const \fBMatrix3\fP & m)\fC [inline]\fP"

.PP
Definition at line 236 of file Matrix3\&.h\&.
.SS "\fBVector3\fP<double>& Matrix3::operator[] (long i)\fC [inline]\fP"

.PP
Definition at line 169 of file Matrix3\&.h\&.
.SS "\fBVector3\fP<double> Matrix3::plane_normal (\fBVector3\fP< double > & b)\fC [inline]\fP"

.PP
Definition at line 354 of file Matrix3\&.h\&.
.SS "\fBVector3\fP<double> Matrix3::plane_normal (vector< double > & b)\fC [inline]\fP"

.PP
Definition at line 339 of file Matrix3\&.h\&.
.SS "\fBQuaternion\fP Matrix3::quaternion () const\fC [inline]\fP"

.PP
Definition at line 129 of file Matrix3\&.h\&.
.SS "\fBMatrix3\fP Matrix3::rotation (const \fBMatrix3\fP & mat)\fC [inline]\fP"

.PP
Definition at line 327 of file Matrix3\&.h\&.
.SS "\fBMatrix3\fP Matrix3::singular_value_decomposition ()\fC [inline]\fP"

.PP
Definition at line 369 of file Matrix3\&.h\&.
.SS "vector<double> Matrix3::tilt_angles ()\fC [inline]\fP"

.PP
Definition at line 319 of file Matrix3\&.h\&.
.SS "double Matrix3::trace ()\fC [inline]\fP"

.PP
Definition at line 270 of file Matrix3\&.h\&.
.SS "\fBMatrix3\fP Matrix3::transpose () const\fC [inline]\fP"

.PP
Definition at line 273 of file Matrix3\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Bsoft from the source code\&.
