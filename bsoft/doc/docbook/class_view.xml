<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_view" xml:lang="en-US">
<title>View Class Reference</title>
<indexterm><primary>View</primary></indexterm>
<para>
<computeroutput>#include &lt;View.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_view_1a44ad60a768422d3fa8fbd7576950080a">View</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_view_1a3d3b4ba18d76c6a0bfe3b23a9cd2390a">View</link> (const <link linkend="_class_view">View</link> &amp;view)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_class_view_1a209357e1f85ecb172c8e92be4a24531f">View</link> (<link linkend="_class_vector3">Vector3</link>&lt; T &gt; &amp;vec)</para>
</listitem>
            <listitem><para><link linkend="_class_view_1a1a183480b56d661d0d5fdbc9e2df2068">View</link> (vector&lt; double &gt; &amp;vec)</para>
</listitem>
            <listitem><para><link linkend="_class_view_1a7915df7e1d6e5d374cd5a11f505dbb0d">View</link> (const double <link linkend="_class_view_1a25e166324ee50dc316b2c1c377f86526">x</link>, const double <link linkend="_class_view_1a34db46f744197d3fc61955961774ca15">y</link>, const double <link linkend="_class_view_1a7c236e8499df59e01865619997f52d00">z</link>, const double <link linkend="_class_view_1a91a3035753e0b56d7853633fec81a470">angle</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_view_1af2fe03a82d369bfb7b43a3b13a6565f1">View</link> (<link linkend="_class_quaternion">Quaternion</link> &amp;q)</para>
</listitem>
            <listitem><para><link linkend="_class_view_1af243ac64d90fdbd0e570ddfbc10723a6">View</link> (<link linkend="_class_matrix3">Matrix3</link> m)</para>
</listitem>
            <listitem><para><link linkend="_class_view_1ab180e49900207d2232e2445ca301c1e3">View</link> (double tilt, double axis)</para>
</listitem>
            <listitem><para><link linkend="_class_view_1ab8d51dbb1e2bec7f1cc5d6668390e95c">View</link> (double <link linkend="_class_view_1a91a3035753e0b56d7853633fec81a470">angle</link>, <link linkend="_class_vector3">Vector3</link>&lt; double &gt; axis)</para>
</listitem>
            <listitem><para><link linkend="_class_view">View</link> <link linkend="_class_view_1add959861aba738b165320e108ceaef76">operator=</link> (const <link linkend="_class_view">View</link> &amp;view)</para>
</listitem>
            <listitem><para><link linkend="_class_view">View</link> <link linkend="_class_view_1a1162c078238be134188606f227a9dd9a">operator=</link> (const vector&lt; double &gt; &amp;vec)</para>
</listitem>
            <listitem><para><link linkend="_class_view">View</link> <link linkend="_class_view_1a5af7f47083365142912c03ef2e1a76b9">operator-</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_view_1a79f417f5f51f1707d39400947cf432a9">operator==</link> (const <link linkend="_class_view">View</link> &amp;view)</para>
</listitem>
            <listitem><para>double &amp; <link linkend="_class_view_1acd0e5d86db586ab2ed78cda997bdfdf0">operator[]</link> (size_t i)</para>
</listitem>
            <listitem><para>double <link linkend="_class_view_1a25e166324ee50dc316b2c1c377f86526">x</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_view_1a34db46f744197d3fc61955961774ca15">y</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_view_1a7c236e8499df59e01865619997f52d00">z</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_view_1a91a3035753e0b56d7853633fec81a470">angle</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_view_1a125ef0ea803d1ab4346c0d160c553eba">x</link> (const double d)</para>
</listitem>
            <listitem><para>void <link linkend="_class_view_1ae595921ea72df943c104e5225c593336">y</link> (const double d)</para>
</listitem>
            <listitem><para>void <link linkend="_class_view_1a610c231ef18bdd4cd8e0dd7b319ae619">z</link> (const double d)</para>
</listitem>
            <listitem><para>void <link linkend="_class_view_1a809db40608292f2da5d3de4d2a6342e9">angle</link> (const double d)</para>
</listitem>
            <listitem><para>vector&lt; double &gt; <link linkend="_class_view_1afc5d3f271bcba29856c99522d7845b65">array</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_view_1ad70c2e150de14a980505d571e6bd034c">vector_size</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_view_1a1cdb5c1ef1d35ea263aa70ae9ca8f267">normalize</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_view_1a646836e0f0dcbe1813ac46c5bb8c2053">negate</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_view">View</link> <link linkend="_class_view_1a771f88fa61a7510d52fefd842fffe6e8">backward</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link>&lt; double &gt; <link linkend="_class_view_1a4206c88d41936c5e853695be10038c6e">vector3</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_quaternion">Quaternion</link> <link linkend="_class_view_1ac75c4e4fcc516a345ae9ce7bad94f5ae">quaternion</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_view_1aab9ea3b52c66cded47a74797eb856c1b">matrix</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_view_1aab528d2176f5ddc815b5d894496bc5d7">distance</link> (const <link linkend="_class_view">View</link> &amp;view)</para>
</listitem>
            <listitem><para>double <link linkend="_class_view_1a68af69790d8a8e7b689d4bb88f08a5ef">angle</link> (const <link linkend="_class_view">View</link> &amp;view)</para>
</listitem>
            <listitem><para>double <link linkend="_class_view_1ab058205bcc905b8823c14196f4db3c66">residual</link> (const <link linkend="_class_view">View</link> &amp;view)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_view">View</link> * <link linkend="_class_view_1a55c76bca3b9c71d4900d64720c74d100">next</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line 26 of file View.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_view_1a44ad60a768422d3fa8fbd7576950080a"/>    <section>
    <title>View()<computeroutput>[1/9]</computeroutput></title>
<indexterm><primary>View</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>View</secondary></indexterm>
<para><computeroutput>View::View ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 38 of file View.h.</para>
    </section><anchor xml:id="_class_view_1a3d3b4ba18d76c6a0bfe3b23a9cd2390a"/>    <section>
    <title>View()<computeroutput>[2/9]</computeroutput></title>
<indexterm><primary>View</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>View</secondary></indexterm>
<para><computeroutput>View::View (const <link linkend="_class_view">View</link> &amp; view)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 39 of file View.h.</para>
    </section><anchor xml:id="_class_view_1a209357e1f85ecb172c8e92be4a24531f"/>    <section>
    <title>View()<computeroutput>[3/9]</computeroutput></title>
<indexterm><primary>View</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>View</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>View::View (<link linkend="_class_vector3">Vector3</link>&lt; T &gt; &amp; vec)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 41 of file View.h.</para>
    </section><anchor xml:id="_class_view_1a1a183480b56d661d0d5fdbc9e2df2068"/>    <section>
    <title>View()<computeroutput>[4/9]</computeroutput></title>
<indexterm><primary>View</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>View</secondary></indexterm>
<para><computeroutput>View::View (vector&lt; double &gt; &amp; vec)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 43 of file View.h.</para>
    </section><anchor xml:id="_class_view_1a7915df7e1d6e5d374cd5a11f505dbb0d"/>    <section>
    <title>View()<computeroutput>[5/9]</computeroutput></title>
<indexterm><primary>View</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>View</secondary></indexterm>
<para><computeroutput>View::View (const double x, const double y, const double z, const double angle)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 47 of file View.h.</para>
    </section><anchor xml:id="_class_view_1af2fe03a82d369bfb7b43a3b13a6565f1"/>    <section>
    <title>View()<computeroutput>[6/9]</computeroutput></title>
<indexterm><primary>View</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>View</secondary></indexterm>
<para><computeroutput>View::View (<link linkend="_class_quaternion">Quaternion</link> &amp; q)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 52 of file View.h.</para>
    </section><anchor xml:id="_class_view_1af243ac64d90fdbd0e570ddfbc10723a6"/>    <section>
    <title>View()<computeroutput>[7/9]</computeroutput></title>
<indexterm><primary>View</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>View</secondary></indexterm>
<para><computeroutput>View::View (<link linkend="_class_matrix3">Matrix3</link> m)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 64 of file View.h.</para>
    </section><anchor xml:id="_class_view_1ab180e49900207d2232e2445ca301c1e3"/>    <section>
    <title>View()<computeroutput>[8/9]</computeroutput></title>
<indexterm><primary>View</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>View</secondary></indexterm>
<para><computeroutput>View::View (double tilt, double axis)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 68 of file View.h.</para>
    </section><anchor xml:id="_class_view_1ab8d51dbb1e2bec7f1cc5d6668390e95c"/>    <section>
    <title>View()<computeroutput>[9/9]</computeroutput></title>
<indexterm><primary>View</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>View</secondary></indexterm>
<para><computeroutput>View::View (double angle, <link linkend="_class_vector3">Vector3</link>&lt; double &gt; axis)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 73 of file View.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_view_1a91a3035753e0b56d7853633fec81a470"/>    <section>
    <title>angle()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>angle</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>angle</secondary></indexterm>
<para><computeroutput>double View::angle ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 99 of file View.h.</para>
    </section><anchor xml:id="_class_view_1a809db40608292f2da5d3de4d2a6342e9"/>    <section>
    <title>angle()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>angle</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>angle</secondary></indexterm>
<para><computeroutput>void View::angle (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 103 of file View.h.</para>
    </section><anchor xml:id="_class_view_1a68af69790d8a8e7b689d4bb88f08a5ef"/>    <section>
    <title>angle()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>angle</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>angle</secondary></indexterm>
<para><computeroutput>double View::angle (const <link linkend="_class_view">View</link> &amp; view)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 163 of file View.h.</para>
    </section><anchor xml:id="_class_view_1afc5d3f271bcba29856c99522d7845b65"/>    <section>
    <title>array()</title>
<indexterm><primary>array</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>array</secondary></indexterm>
<para><computeroutput>vector&lt;double&gt; View::array ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 104 of file View.h.</para>
    </section><anchor xml:id="_class_view_1a771f88fa61a7510d52fefd842fffe6e8"/>    <section>
    <title>backward()</title>
<indexterm><primary>backward</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>backward</secondary></indexterm>
<para><computeroutput><link linkend="_class_view">View</link> View::backward ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 119 of file View.h.</para>
    </section><anchor xml:id="_class_view_1aab528d2176f5ddc815b5d894496bc5d7"/>    <section>
    <title>distance()</title>
<indexterm><primary>distance</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>distance</secondary></indexterm>
<para><computeroutput>double View::distance (const <link linkend="_class_view">View</link> &amp; view)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 159 of file View.h.</para>
    </section><anchor xml:id="_class_view_1aab9ea3b52c66cded47a74797eb856c1b"/>    <section>
    <title>matrix()</title>
<indexterm><primary>matrix</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>matrix</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix3">Matrix3</link> View::matrix ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 154 of file View.h.</para>
    </section><anchor xml:id="_class_view_1a646836e0f0dcbe1813ac46c5bb8c2053"/>    <section>
    <title>negate()</title>
<indexterm><primary>negate</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>negate</secondary></indexterm>
<para><computeroutput>void View::negate ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 118 of file View.h.</para>
    </section><anchor xml:id="_class_view_1a1cdb5c1ef1d35ea263aa70ae9ca8f267"/>    <section>
    <title>normalize()</title>
<indexterm><primary>normalize</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>normalize</secondary></indexterm>
<para><computeroutput>double View::normalize ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 110 of file View.h.</para>
    </section><anchor xml:id="_class_view_1a5af7f47083365142912c03ef2e1a76b9"/>    <section>
    <title>operator-()</title>
<indexterm><primary>operator-</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_class_view">View</link> View::operator- ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 88 of file View.h.</para>
    </section><anchor xml:id="_class_view_1a1162c078238be134188606f227a9dd9a"/>    <section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_view">View</link> View::operator= (const vector&lt; double &gt; &amp; vec)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 82 of file View.h.</para>
    </section><anchor xml:id="_class_view_1add959861aba738b165320e108ceaef76"/>    <section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_view">View</link> View::operator= (const <link linkend="_class_view">View</link> &amp; view)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 78 of file View.h.</para>
    </section><anchor xml:id="_class_view_1a79f417f5f51f1707d39400947cf432a9"/>    <section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool View::operator== (const <link linkend="_class_view">View</link> &amp; view)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 92 of file View.h.</para>
    </section><anchor xml:id="_class_view_1acd0e5d86db586ab2ed78cda997bdfdf0"/>    <section>
    <title>operator[]()</title>
<indexterm><primary>operator[]</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput>double&amp; View::operator[] (size_t i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 95 of file View.h.</para>
    </section><anchor xml:id="_class_view_1ac75c4e4fcc516a345ae9ce7bad94f5ae"/>    <section>
    <title>quaternion()</title>
<indexterm><primary>quaternion</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>quaternion</secondary></indexterm>
<para><computeroutput><link linkend="_class_quaternion">Quaternion</link> View::quaternion ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 131 of file View.h.</para>
    </section><anchor xml:id="_class_view_1ab058205bcc905b8823c14196f4db3c66"/>    <section>
    <title>residual()</title>
<indexterm><primary>residual</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>residual</secondary></indexterm>
<para><computeroutput>double View::residual (const <link linkend="_class_view">View</link> &amp; view)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 169 of file View.h.</para>
    </section><anchor xml:id="_class_view_1a4206c88d41936c5e853695be10038c6e"/>    <section>
    <title>vector3()</title>
<indexterm><primary>vector3</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>vector3</secondary></indexterm>
<para><computeroutput><link linkend="_class_vector3">Vector3</link>&lt;double&gt; View::vector3 ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 130 of file View.h.</para>
    </section><anchor xml:id="_class_view_1ad70c2e150de14a980505d571e6bd034c"/>    <section>
    <title>vector_size()</title>
<indexterm><primary>vector_size</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>vector_size</secondary></indexterm>
<para><computeroutput>double View::vector_size ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 107 of file View.h.</para>
    </section><anchor xml:id="_class_view_1a25e166324ee50dc316b2c1c377f86526"/>    <section>
    <title>x()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>x</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>x</secondary></indexterm>
<para><computeroutput>double View::x ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 96 of file View.h.</para>
    </section><anchor xml:id="_class_view_1a125ef0ea803d1ab4346c0d160c553eba"/>    <section>
    <title>x()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>x</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>x</secondary></indexterm>
<para><computeroutput>void View::x (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 100 of file View.h.</para>
    </section><anchor xml:id="_class_view_1a34db46f744197d3fc61955961774ca15"/>    <section>
    <title>y()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>y</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>y</secondary></indexterm>
<para><computeroutput>double View::y ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 97 of file View.h.</para>
    </section><anchor xml:id="_class_view_1ae595921ea72df943c104e5225c593336"/>    <section>
    <title>y()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>y</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>y</secondary></indexterm>
<para><computeroutput>void View::y (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 101 of file View.h.</para>
    </section><anchor xml:id="_class_view_1a7c236e8499df59e01865619997f52d00"/>    <section>
    <title>z()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>z</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>z</secondary></indexterm>
<para><computeroutput>double View::z ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 98 of file View.h.</para>
    </section><anchor xml:id="_class_view_1a610c231ef18bdd4cd8e0dd7b319ae619"/>    <section>
    <title>z()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>z</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>z</secondary></indexterm>
<para><computeroutput>void View::z (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 102 of file View.h.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_view_1a55c76bca3b9c71d4900d64720c74d100"/>    <section>
    <title>next</title>
<indexterm><primary>next</primary><secondary>View</secondary></indexterm>
<indexterm><primary>View</primary><secondary>next</secondary></indexterm>
<para><computeroutput><link linkend="_class_view">View</link>* View::next</computeroutput></para><para>
Definition at line 28 of file View.h.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
/Users/bernard/b20/bsoft/include/<link linkend="__view_8h">View.h</link></section>
</section>
