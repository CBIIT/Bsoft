<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_complex" xml:lang="en-US">
<title>Complex&lt; Type &gt; Class Template Reference</title>
<indexterm><primary>Complex&lt; Type &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;Complex.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_complex_1aec4ffdb6f1631bf6715e90945f48f302">Complex</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_complex_1a0abbafe7a60df8c80ab49b5c971cc6d0">Complex</link> (const <link linkend="_class_complex">Complex</link> &amp;c)</para>
</listitem>
            <listitem><para><link linkend="_class_complex_1a0f8ece8bdfb9aa756b76d2f205189b66">Complex</link> (const Type r)</para>
</listitem>
            <listitem><para><link linkend="_class_complex_1a0ea5f353cfa2ad3423dcdfa3cbb18459">Complex</link> (const Type r, const Type i)</para>
</listitem>
            <listitem><para><link linkend="_class_complex">Complex</link> <link linkend="_class_complex_1a9b06e3a29cd015b54871f8f7bb67f6b2">operator=</link> (const double &amp;d)</para>
</listitem>
            <listitem><para><link linkend="_class_complex">Complex</link> <link linkend="_class_complex_1a0c262198114632ba811e663525a3b221">operator=</link> (const <link linkend="_class_complex">Complex</link> &amp;c)</para>
</listitem>
            <listitem><para><link linkend="_class_complex">Complex</link> <link linkend="_class_complex_1a84b09b74ed34354f03ed61633e9b0af6">operator-</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_complex">Complex</link> <link linkend="_class_complex_1a76d4d79c20bca46c4c686232f270a060">operator+=</link> (const <link linkend="_class_complex">Complex</link> &amp;c)</para>
</listitem>
            <listitem><para><link linkend="_class_complex">Complex</link> <link linkend="_class_complex_1ab46cfb9a135a6e65bfbb231d554ef2ba">operator+</link> (const <link linkend="_class_complex">Complex</link> &amp;c)</para>
</listitem>
            <listitem><para><link linkend="_class_complex">Complex</link> <link linkend="_class_complex_1a97d382d204e5c1b1c4c501aae45dcc39">operator-=</link> (const <link linkend="_class_complex">Complex</link> &amp;c)</para>
</listitem>
            <listitem><para><link linkend="_class_complex">Complex</link> <link linkend="_class_complex_1a0ceda73c6fb1f4b4eccecc1887cebd6c">operator-</link> (const <link linkend="_class_complex">Complex</link> &amp;c)</para>
</listitem>
            <listitem><para><link linkend="_class_complex">Complex</link> <link linkend="_class_complex_1a8305ec305e0d72c8e4072dff3c4210bf">operator*=</link> (const double d)</para>
</listitem>
            <listitem><para><link linkend="_class_complex">Complex</link> <link linkend="_class_complex_1af54590a91b398a82ee88096356a009fb">operator*=</link> (const <link linkend="_class_complex">Complex</link> &amp;c)</para>
</listitem>
            <listitem><para><link linkend="_class_complex">Complex</link> <link linkend="_class_complex_1a0ca414dee984b4406f6fe964f6cf5ce8">operator*</link> (const double d)</para>
</listitem>
            <listitem><para><link linkend="_class_complex">Complex</link> <link linkend="_class_complex_1a285ffec972876b32d3bf90d32062b71d">operator*</link> (const <link linkend="_class_complex">Complex</link> &amp;c)</para>
</listitem>
            <listitem><para><link linkend="_class_complex">Complex</link> <link linkend="_class_complex_1a401011609a495a99281947e66e5780b2">operator/=</link> (const double d)</para>
</listitem>
            <listitem><para><link linkend="_class_complex">Complex</link> <link linkend="_class_complex_1a64e54ceeb3df86923db18ba8bc7d28ae">operator/=</link> (const <link linkend="_class_complex">Complex</link> &amp;c)</para>
</listitem>
            <listitem><para><link linkend="_class_complex">Complex</link> <link linkend="_class_complex_1aca4e364687e9dc16049688e7938ce7ac">operator/</link> (const double d)</para>
</listitem>
            <listitem><para><link linkend="_class_complex">Complex</link> <link linkend="_class_complex_1a18618166756ba3c911462e62c4a6d69c">operator/</link> (const <link linkend="_class_complex">Complex</link> &amp;c)</para>
</listitem>
            <listitem><para>Type &amp; <link linkend="_class_complex_1a5329bb846729651b83dc507034433f66">operator[]</link> (const int i)</para>
</listitem>
            <listitem><para>template&lt;typename T2 &gt; </para><para><link linkend="_class_complex_1af14b359bff1f042022606738db26f8ab">operator Complex&lt; T2 &gt;</link> () const</para>
</listitem>
            <listitem><para>bool <link linkend="_class_complex_1a3b13fa75e21510e52a6e9c844a496faa">is_finite</link> ()</para>
</listitem>
            <listitem><para>Type <link linkend="_class_complex_1a1655185cccaa93ce2b1587edabd28ccf">real</link> ()</para>
</listitem>
            <listitem><para>Type <link linkend="_class_complex_1a0f7a496fd21ef1d352bee2dfaa11380e">imag</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_complex_1af412c150996a6cd8d4fdffb555906a6a">power</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_complex_1a66966f587a6eca144e08304830de55aa">amp</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_complex_1ad896bb110e045f2bd0ef9960a049b1e7">phi</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_complex">Complex</link> <link linkend="_class_complex_1ae2d31bf92dd414ef9c29bd9d77a2167c">conj</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_complex_1ab5935d9946b857c1211e40ce2043fce2">set</link> (const double a, const double p)</para>
</listitem>
            <listitem><para>void <link linkend="_class_complex_1a74aa886ea0988b7a075e1655b7981f3b">real</link> (const Type d)</para>
</listitem>
            <listitem><para>void <link linkend="_class_complex_1ac2ea878c28de6edc2d332ff2fa4d07cf">imag</link> (const Type d)</para>
</listitem>
            <listitem><para>void <link linkend="_class_complex_1a576e65f2e17245d3bd96de246b24f387">amp</link> (const double d)</para>
</listitem>
            <listitem><para>void <link linkend="_class_complex_1ace600479d486aff5f9980e217ac85617">phi</link> (const double d)</para>
</listitem>
            <listitem><para>void <link linkend="_class_complex_1a17af0807d18232874718a346aca42c58">shift_phi</link> (const double d)</para>
</listitem>
            <listitem><para><link linkend="_class_complex">Complex</link> <link linkend="_class_complex_1a944b5e1976e937f0d204836a344f5b70">unpack_first</link> (<link linkend="_class_complex">Complex</link> c)</para>
</listitem>
            <listitem><para><link linkend="_class_complex">Complex</link> <link linkend="_class_complex_1a9beb14c66dcb4cd4c1341aa6199bbfec">unpack_second</link> (<link linkend="_class_complex">Complex</link> c)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Type&gt;
class Complex&lt; Type &gt;</title></simplesect>

<para>
Definition at line 23 of file Complex.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_complex_1aec4ffdb6f1631bf6715e90945f48f302"/>    <section>
    <title>Complex()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>Complex</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>Complex</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link>&lt; Type &gt;::<link linkend="_class_complex">Complex</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 26 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a0abbafe7a60df8c80ab49b5c971cc6d0"/>    <section>
    <title>Complex()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>Complex</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>Complex</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link>&lt; Type &gt;::<link linkend="_class_complex">Complex</link> (const <link linkend="_class_complex">Complex</link>&lt; Type &gt; &amp; c)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 27 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a0f8ece8bdfb9aa756b76d2f205189b66"/>    <section>
    <title>Complex()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>Complex</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>Complex</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link>&lt; Type &gt;::<link linkend="_class_complex">Complex</link> (const Type r)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 28 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a0ea5f353cfa2ad3423dcdfa3cbb18459"/>    <section>
    <title>Complex()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>Complex</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>Complex</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link>&lt; Type &gt;::<link linkend="_class_complex">Complex</link> (const Type r, const Type i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 29 of file Complex.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_complex_1a66966f587a6eca144e08304830de55aa"/>    <section>
    <title>amp()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>amp</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>amp</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_complex">Complex</link>&lt; Type &gt;::amp ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 104 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a576e65f2e17245d3bd96de246b24f387"/>    <section>
    <title>amp()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>amp</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>amp</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>void <link linkend="_class_complex">Complex</link>&lt; Type &gt;::amp (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 110 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1ae2d31bf92dd414ef9c29bd9d77a2167c"/>    <section>
    <title>conj()</title>
<indexterm><primary>conj</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>conj</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link> <link linkend="_class_complex">Complex</link>&lt; Type &gt;::conj ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 106 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a0f7a496fd21ef1d352bee2dfaa11380e"/>    <section>
    <title>imag()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>imag</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>imag</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>Type <link linkend="_class_complex">Complex</link>&lt; Type &gt;::imag ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 102 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1ac2ea878c28de6edc2d332ff2fa4d07cf"/>    <section>
    <title>imag()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>imag</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>imag</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>void <link linkend="_class_complex">Complex</link>&lt; Type &gt;::imag (const Type d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 109 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a3b13fa75e21510e52a6e9c844a496faa"/>    <section>
    <title>is_finite()</title>
<indexterm><primary>is_finite</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>is_finite</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_complex">Complex</link>&lt; Type &gt;::is_finite ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 100 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1af14b359bff1f042022606738db26f8ab"/>    <section>
    <title>operator Complex&lt; T2 &gt;()</title>
<indexterm><primary>operator Complex&lt; T2 &gt;</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>operator Complex&lt; T2 &gt;</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><computeroutput>template&lt;typename T2 &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link>&lt; Type &gt;::operator <link linkend="_class_complex">Complex</link>&lt; T2 &gt; ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 97 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a285ffec972876b32d3bf90d32062b71d"/>    <section>
    <title>operator*()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link> <link linkend="_class_complex">Complex</link>&lt; Type &gt;::operator* (const <link linkend="_class_complex">Complex</link>&lt; Type &gt; &amp; c)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 72 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a0ca414dee984b4406f6fe964f6cf5ce8"/>    <section>
    <title>operator*()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link> <link linkend="_class_complex">Complex</link>&lt; Type &gt;::operator* (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 69 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1af54590a91b398a82ee88096356a009fb"/>    <section>
    <title>operator*=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator*=</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>operator*=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link> <link linkend="_class_complex">Complex</link>&lt; Type &gt;::operator*= (const <link linkend="_class_complex">Complex</link>&lt; Type &gt; &amp; c)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 64 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a8305ec305e0d72c8e4072dff3c4210bf"/>    <section>
    <title>operator*=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator*=</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>operator*=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link> <link linkend="_class_complex">Complex</link>&lt; Type &gt;::operator*= (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 59 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1ab46cfb9a135a6e65bfbb231d554ef2ba"/>    <section>
    <title>operator+()</title>
<indexterm><primary>operator+</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link> <link linkend="_class_complex">Complex</link>&lt; Type &gt;::operator+ (const <link linkend="_class_complex">Complex</link>&lt; Type &gt; &amp; c)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 48 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a76d4d79c20bca46c4c686232f270a060"/>    <section>
    <title>operator+=()</title>
<indexterm><primary>operator+=</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link> <link linkend="_class_complex">Complex</link>&lt; Type &gt;::operator+= (const <link linkend="_class_complex">Complex</link>&lt; Type &gt; &amp; c)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 43 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a84b09b74ed34354f03ed61633e9b0af6"/>    <section>
    <title>operator-()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link> <link linkend="_class_complex">Complex</link>&lt; Type &gt;::operator- ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 40 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a0ceda73c6fb1f4b4eccecc1887cebd6c"/>    <section>
    <title>operator-()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link> <link linkend="_class_complex">Complex</link>&lt; Type &gt;::operator- (const <link linkend="_class_complex">Complex</link>&lt; Type &gt; &amp; c)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 56 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a97d382d204e5c1b1c4c501aae45dcc39"/>    <section>
    <title>operator-=()</title>
<indexterm><primary>operator-=</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link> <link linkend="_class_complex">Complex</link>&lt; Type &gt;::operator-= (const <link linkend="_class_complex">Complex</link>&lt; Type &gt; &amp; c)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 51 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a18618166756ba3c911462e62c4a6d69c"/>    <section>
    <title>operator/()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator/</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>operator/</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link> <link linkend="_class_complex">Complex</link>&lt; Type &gt;::operator/ (const <link linkend="_class_complex">Complex</link>&lt; Type &gt; &amp; c)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 90 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1aca4e364687e9dc16049688e7938ce7ac"/>    <section>
    <title>operator/()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator/</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>operator/</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link> <link linkend="_class_complex">Complex</link>&lt; Type &gt;::operator/ (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 87 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a64e54ceeb3df86923db18ba8bc7d28ae"/>    <section>
    <title>operator/=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator/=</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>operator/=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link> <link linkend="_class_complex">Complex</link>&lt; Type &gt;::operator/= (const <link linkend="_class_complex">Complex</link>&lt; Type &gt; &amp; c)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 80 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a401011609a495a99281947e66e5780b2"/>    <section>
    <title>operator/=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator/=</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>operator/=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link> <link linkend="_class_complex">Complex</link>&lt; Type &gt;::operator/= (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 75 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a0c262198114632ba811e663525a3b221"/>    <section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link> <link linkend="_class_complex">Complex</link>&lt; Type &gt;::operator= (const <link linkend="_class_complex">Complex</link>&lt; Type &gt; &amp; c)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 35 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a9b06e3a29cd015b54871f8f7bb67f6b2"/>    <section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link> <link linkend="_class_complex">Complex</link>&lt; Type &gt;::operator= (const double &amp; d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 30 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a5329bb846729651b83dc507034433f66"/>    <section>
    <title>operator[]()</title>
<indexterm><primary>operator[]</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>Type&amp; <link linkend="_class_complex">Complex</link>&lt; Type &gt;::operator[] (const int i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 96 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1ad896bb110e045f2bd0ef9960a049b1e7"/>    <section>
    <title>phi()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>phi</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>phi</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_complex">Complex</link>&lt; Type &gt;::phi ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 105 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1ace600479d486aff5f9980e217ac85617"/>    <section>
    <title>phi()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>phi</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>phi</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>void <link linkend="_class_complex">Complex</link>&lt; Type &gt;::phi (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 111 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1af412c150996a6cd8d4fdffb555906a6a"/>    <section>
    <title>power()</title>
<indexterm><primary>power</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>power</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_complex">Complex</link>&lt; Type &gt;::power ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 103 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a1655185cccaa93ce2b1587edabd28ccf"/>    <section>
    <title>real()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>real</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>real</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>Type <link linkend="_class_complex">Complex</link>&lt; Type &gt;::real ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 101 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a74aa886ea0988b7a075e1655b7981f3b"/>    <section>
    <title>real()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>real</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>real</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>void <link linkend="_class_complex">Complex</link>&lt; Type &gt;::real (const Type d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 108 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1ab5935d9946b857c1211e40ce2043fce2"/>    <section>
    <title>set()</title>
<indexterm><primary>set</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>set</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>void <link linkend="_class_complex">Complex</link>&lt; Type &gt;::set (const double a, const double p)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 107 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a17af0807d18232874718a346aca42c58"/>    <section>
    <title>shift_phi()</title>
<indexterm><primary>shift_phi</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>shift_phi</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>void <link linkend="_class_complex">Complex</link>&lt; Type &gt;::shift_phi (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 112 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a944b5e1976e937f0d204836a344f5b70"/>    <section>
    <title>unpack_first()</title>
<indexterm><primary>unpack_first</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>unpack_first</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link> <link linkend="_class_complex">Complex</link>&lt; Type &gt;::unpack_first (<link linkend="_class_complex">Complex</link>&lt; Type &gt; c)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 113 of file Complex.h.</para>
    </section><anchor xml:id="_class_complex_1a9beb14c66dcb4cd4c1341aa6199bbfec"/>    <section>
    <title>unpack_second()</title>
<indexterm><primary>unpack_second</primary><secondary>Complex&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Complex&lt; Type &gt;</primary><secondary>unpack_second</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_complex">Complex</link> <link linkend="_class_complex">Complex</link>&lt; Type &gt;::unpack_second (<link linkend="_class_complex">Complex</link>&lt; Type &gt; c)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 116 of file Complex.h.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
/Users/bernard/b20/bsoft/include/<link linkend="__complex_8h">Complex.h</link></section>
</section>
