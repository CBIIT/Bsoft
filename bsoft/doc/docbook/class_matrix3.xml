<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_matrix3" xml:lang="en-US">
<title>Matrix3 Class Reference</title>
<indexterm><primary>Matrix3</primary></indexterm>
<para>
<computeroutput>#include &lt;Matrix3.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_matrix3_1a773fdcf139826ddb39c30e7d08bbdb90">Matrix3</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3_1a59ef4fe113a321bd6330f5b8eecd2340">Matrix3</link> (const double v)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3_1ad33eb033a80d60795becad944d9dee31">Matrix3</link> (const double *v)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3_1a24c57eb73dff312cf0c1412269fdcd5b">Matrix3</link> (const vector&lt; double &gt; &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3_1a06daf40adb3da112c046831f55677a52">Matrix3</link> (const double d0, const double d1, const double d2, const double d3, const double d4, const double d5, const double d6, const double d7, const double d8)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3_1a4b6d2f0301b406dc9d41acdd96d23d29">Matrix3</link> (const <link linkend="_class_matrix3">Matrix3</link> &amp;m)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3_1ab2ef1b1104552a37e90a5db82fbb8391">Matrix3</link> (<link linkend="_class_quaternion">Quaternion</link> q)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_class_matrix3_1aca941bebf361e85e0ab1a338df3f3ce8">Matrix3</link> (<link linkend="_class_vector3">Vector3</link>&lt; T &gt; axis, double <link linkend="_class_matrix3_1aeeb91c445bb66e8bced1a13cb9bf9eb3">angle</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3_1af509e58e4540436e570faee71981c355">Matrix3</link> (double tilt, double axis)</para>
</listitem>
            <listitem><para>template&lt;typename Type1 , typename Type2 &gt; </para><para><link linkend="_class_matrix3_1ae03eed1d654fc92fb3f4e974a14422a5">Matrix3</link> (<link linkend="_class_vector3">Vector3</link>&lt; Type1 &gt; &amp;from_vec, <link linkend="_class_vector3">Vector3</link>&lt; Type2 &gt; &amp;to_vec)</para>
</listitem>
            <listitem><para><link linkend="_class_quaternion">Quaternion</link> <link linkend="_class_matrix3_1ad9d861341110840592e690dcdae5093d">quaternion</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link>&lt; double &gt; &amp; <link linkend="_class_matrix3_1a44fa7be59a9a071130ed6715270875d4">operator[]</link> (long i)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_matrix3_1ad5f939ebf697a484ab592789cc9b7c55">operator=</link> (const <link linkend="_class_matrix3">Matrix3</link> &amp;m)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_matrix3_1a98e1c39a375ee63ae0a168bb43f5fc4c">operator+=</link> (const <link linkend="_class_matrix3">Matrix3</link> &amp;m)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_matrix3_1af6c4d05b5456a16af8da8dc9ff781b7a">operator+</link> (const <link linkend="_class_matrix3">Matrix3</link> &amp;m)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_matrix3_1a5598deb4d158ce64881f0cc695489f9e">operator-=</link> (const <link linkend="_class_matrix3">Matrix3</link> &amp;m)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_matrix3_1a6175d74e25f90789dc041a5d7f16c902">operator-</link> (const <link linkend="_class_matrix3">Matrix3</link> &amp;m)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_matrix3_1a8cda402ff65f66ac7893d16af919395c">operator-</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_matrix3_1aa64917801516002178b85c7ff3c3c1db">operator*=</link> (const <link linkend="_class_matrix3">Matrix3</link> &amp;m)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_matrix3_1a199a9ab8b3d8f0bdcb4195ed01b0fb6a">operator*</link> (const <link linkend="_class_matrix3">Matrix3</link> &amp;m)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_matrix3_1ac3b48211d31225541279f39e462eea33">operator*=</link> (const double v)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_matrix3_1a32527e834e997406e0e3027fd574a90e">operator*</link> (const double v)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_matrix3_1a4864d74699bfed99a51fe44f1bbed7ff">operator/=</link> (const double v)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_matrix3_1a4c1d025c7dcec228e0871d3ddb74d754">operator/</link> (const double v)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_matrix3_1af86f5009fe3c2ca1fd9dfb05d777df64">operator==</link> (const <link linkend="_class_matrix3">Matrix3</link> &amp;m)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_class_vector3">Vector3</link>&lt; T &gt; <link linkend="_class_matrix3_1a6a1a017fdf9e4ee35bee99cd2b19a511">operator*</link> (<link linkend="_class_vector3">Vector3</link>&lt; T &gt; &amp;v)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>vector&lt; T &gt; <link linkend="_class_matrix3_1af6d5c1d609253de87ad5c83b73fb00a5">operator*</link> (vector&lt; T &gt; &amp;v)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_matrix3_1afdb679e40659188fd3f9e02ca6c49f5d">operator/=</link> (<link linkend="_class_vector3">Vector3</link>&lt; T &gt; &amp;v)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_matrix3_1a286fc37e6ff5825c36d3ee05882321bb">operator/</link> (<link linkend="_class_vector3">Vector3</link>&lt; T &gt; &amp;v)</para>
</listitem>
            <listitem><para>double <link linkend="_class_matrix3_1ab4b5cdf3dc0827fbe68e9fe6d55cabe3">determinant</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_matrix3_1a8b1c3c83ced7d4181ba02cde4167b550">trace</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_matrix3_1ae8307ddf4869af1bbe08da25d9d5e1ee">transpose</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_matrix3_1a1e75ffb0152becf1ad56877cc0d8bf2f">normalize</link> ()</para>
</listitem>
            <listitem><para>vector&lt; double &gt; <link linkend="_class_matrix3_1aa9158395d269ae2c6a73e6fb53c7d2fc">tilt_angles</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_matrix3_1aaeec44750f253901453a807e5dc24a4f">rotation</link> (const <link linkend="_class_matrix3">Matrix3</link> &amp;mat)</para>
</listitem>
            <listitem><para>double <link linkend="_class_matrix3_1aeeb91c445bb66e8bced1a13cb9bf9eb3">angle</link> (const <link linkend="_class_matrix3">Matrix3</link> &amp;mat)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link>&lt; double &gt; <link linkend="_class_matrix3_1a3abd44212c958287a8512bb420dd530d">plane_normal</link> (vector&lt; double &gt; &amp;b)</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link>&lt; double &gt; <link linkend="_class_matrix3_1a4a3d4ea5bb7514df12048e704c0a3c40">plane_normal</link> (<link linkend="_class_vector3">Vector3</link>&lt; double &gt; &amp;b)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_matrix3_1a915da4331361e68eafa4a43cbfe2991b">LU_decomposition</link> (vector&lt; double &gt; &amp;b)</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_matrix3_1aeba055303cca65bb8d13d803d867675c">singular_value_decomposition</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line 17 of file Matrix3.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_matrix3_1a773fdcf139826ddb39c30e7d08bbdb90"/>    <section>
    <title>Matrix3()<computeroutput>[1/10]</computeroutput></title>
<indexterm><primary>Matrix3</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>Matrix3</secondary></indexterm>
<para><computeroutput>Matrix3::Matrix3 ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 44 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1a59ef4fe113a321bd6330f5b8eecd2340"/>    <section>
    <title>Matrix3()<computeroutput>[2/10]</computeroutput></title>
<indexterm><primary>Matrix3</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>Matrix3</secondary></indexterm>
<para><computeroutput>Matrix3::Matrix3 (const double v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 46 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1ad33eb033a80d60795becad944d9dee31"/>    <section>
    <title>Matrix3()<computeroutput>[3/10]</computeroutput></title>
<indexterm><primary>Matrix3</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>Matrix3</secondary></indexterm>
<para><computeroutput>Matrix3::Matrix3 (const double * v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 47 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1a24c57eb73dff312cf0c1412269fdcd5b"/>    <section>
    <title>Matrix3()<computeroutput>[4/10]</computeroutput></title>
<indexterm><primary>Matrix3</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>Matrix3</secondary></indexterm>
<para><computeroutput>Matrix3::Matrix3 (const vector&lt; double &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 53 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1a06daf40adb3da112c046831f55677a52"/>    <section>
    <title>Matrix3()<computeroutput>[5/10]</computeroutput></title>
<indexterm><primary>Matrix3</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>Matrix3</secondary></indexterm>
<para><computeroutput>Matrix3::Matrix3 (const double d0, const double d1, const double d2, const double d3, const double d4, const double d5, const double d6, const double d7, const double d8)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 59 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1a4b6d2f0301b406dc9d41acdd96d23d29"/>    <section>
    <title>Matrix3()<computeroutput>[6/10]</computeroutput></title>
<indexterm><primary>Matrix3</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>Matrix3</secondary></indexterm>
<para><computeroutput>Matrix3::Matrix3 (const <link linkend="_class_matrix3">Matrix3</link> &amp; m)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 66 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1ab2ef1b1104552a37e90a5db82fbb8391"/>    <section>
    <title>Matrix3()<computeroutput>[7/10]</computeroutput></title>
<indexterm><primary>Matrix3</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>Matrix3</secondary></indexterm>
<para><computeroutput>Matrix3::Matrix3 (<link linkend="_class_quaternion">Quaternion</link> q)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 68 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1aca941bebf361e85e0ab1a338df3f3ce8"/>    <section>
    <title>Matrix3()<computeroutput>[8/10]</computeroutput></title>
<indexterm><primary>Matrix3</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>Matrix3</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>Matrix3::Matrix3 (<link linkend="_class_vector3">Vector3</link>&lt; T &gt; axis, double angle)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 73 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1af509e58e4540436e570faee71981c355"/>    <section>
    <title>Matrix3()<computeroutput>[9/10]</computeroutput></title>
<indexterm><primary>Matrix3</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>Matrix3</secondary></indexterm>
<para><computeroutput>Matrix3::Matrix3 (double tilt, double axis)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 78 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1ae03eed1d654fc92fb3f4e974a14422a5"/>    <section>
    <title>Matrix3()<computeroutput>[10/10]</computeroutput></title>
<indexterm><primary>Matrix3</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>Matrix3</secondary></indexterm>
<computeroutput>template&lt;typename Type1 , typename Type2 &gt; </computeroutput><para><computeroutput>Matrix3::Matrix3 (<link linkend="_class_vector3">Vector3</link>&lt; Type1 &gt; &amp; from_vec, <link linkend="_class_vector3">Vector3</link>&lt; Type2 &gt; &amp; to_vec)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 85 of file Matrix3.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_matrix3_1aeeb91c445bb66e8bced1a13cb9bf9eb3"/>    <section>
    <title>angle()</title>
<indexterm><primary>angle</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>angle</secondary></indexterm>
<para><computeroutput>double Matrix3::angle (const <link linkend="_class_matrix3">Matrix3</link> &amp; mat)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 333 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1ab4b5cdf3dc0827fbe68e9fe6d55cabe3"/>    <section>
    <title>determinant()</title>
<indexterm><primary>determinant</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>determinant</secondary></indexterm>
<para><computeroutput>double Matrix3::determinant ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 265 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1a915da4331361e68eafa4a43cbfe2991b"/>    <section>
    <title>LU_decomposition()</title>
<indexterm><primary>LU_decomposition</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>LU_decomposition</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix3">Matrix3</link> Matrix3::LU_decomposition (vector&lt; double &gt; &amp; b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 360 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1a1e75ffb0152becf1ad56877cc0d8bf2f"/>    <section>
    <title>normalize()</title>
<indexterm><primary>normalize</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>normalize</secondary></indexterm>
<para><computeroutput>void Matrix3::normalize ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 299 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1a32527e834e997406e0e3027fd574a90e"/>    <section>
    <title>operator*()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>operator*</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix3">Matrix3</link> Matrix3::operator* (const double v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 223 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1a199a9ab8b3d8f0bdcb4195ed01b0fb6a"/>    <section>
    <title>operator*()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>operator*</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix3">Matrix3</link> Matrix3::operator* (const <link linkend="_class_matrix3">Matrix3</link> &amp; m)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 201 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1a6a1a017fdf9e4ee35bee99cd2b19a511"/>    <section>
    <title>operator*()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link>&lt;T&gt; Matrix3::operator* (<link linkend="_class_vector3">Vector3</link>&lt; T &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 243 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1af6d5c1d609253de87ad5c83b73fb00a5"/>    <section>
    <title>operator*()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>vector&lt;T&gt; Matrix3::operator* (vector&lt; T &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 249 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1ac3b48211d31225541279f39e462eea33"/>    <section>
    <title>operator*=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator*=</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>operator*=</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix3">Matrix3</link> Matrix3::operator*= (const double v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 219 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1aa64917801516002178b85c7ff3c3c1db"/>    <section>
    <title>operator*=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator*=</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>operator*=</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix3">Matrix3</link> Matrix3::operator*= (const <link linkend="_class_matrix3">Matrix3</link> &amp; m)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 197 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1af6c4d05b5456a16af8da8dc9ff781b7a"/>    <section>
    <title>operator+()</title>
<indexterm><primary>operator+</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix3">Matrix3</link> Matrix3::operator+ (const <link linkend="_class_matrix3">Matrix3</link> &amp; m)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 180 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1a98e1c39a375ee63ae0a168bb43f5fc4c"/>    <section>
    <title>operator+=()</title>
<indexterm><primary>operator+=</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix3">Matrix3</link> Matrix3::operator+= (const <link linkend="_class_matrix3">Matrix3</link> &amp; m)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 176 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1a8cda402ff65f66ac7893d16af919395c"/>    <section>
    <title>operator-()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix3">Matrix3</link> Matrix3::operator- ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 192 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1a6175d74e25f90789dc041a5d7f16c902"/>    <section>
    <title>operator-()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix3">Matrix3</link> Matrix3::operator- (const <link linkend="_class_matrix3">Matrix3</link> &amp; m)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 188 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1a5598deb4d158ce64881f0cc695489f9e"/>    <section>
    <title>operator-=()</title>
<indexterm><primary>operator-=</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>operator-=</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix3">Matrix3</link> Matrix3::operator-= (const <link linkend="_class_matrix3">Matrix3</link> &amp; m)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 184 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1a4c1d025c7dcec228e0871d3ddb74d754"/>    <section>
    <title>operator/()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator/</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>operator/</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix3">Matrix3</link> Matrix3::operator/ (const double v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 232 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1a286fc37e6ff5825c36d3ee05882321bb"/>    <section>
    <title>operator/()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator/</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>operator/</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_class_matrix3">Matrix3</link> Matrix3::operator/ (<link linkend="_class_vector3">Vector3</link>&lt; T &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 261 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1a4864d74699bfed99a51fe44f1bbed7ff"/>    <section>
    <title>operator/=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator/=</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>operator/=</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix3">Matrix3</link> Matrix3::operator/= (const double v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 228 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1afdb679e40659188fd3f9e02ca6c49f5d"/>    <section>
    <title>operator/=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator/=</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>operator/=</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_class_matrix3">Matrix3</link> Matrix3::operator/= (<link linkend="_class_vector3">Vector3</link>&lt; T &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 256 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1ad5f939ebf697a484ab592789cc9b7c55"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix3">Matrix3</link> Matrix3::operator= (const <link linkend="_class_matrix3">Matrix3</link> &amp; m)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 172 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1af86f5009fe3c2ca1fd9dfb05d777df64"/>    <section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool Matrix3::operator== (const <link linkend="_class_matrix3">Matrix3</link> &amp; m)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 236 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1a44fa7be59a9a071130ed6715270875d4"/>    <section>
    <title>operator[]()</title>
<indexterm><primary>operator[]</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_class_vector3">Vector3</link>&lt;double&gt;&amp; Matrix3::operator[] (long i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 169 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1a4a3d4ea5bb7514df12048e704c0a3c40"/>    <section>
    <title>plane_normal()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>plane_normal</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>plane_normal</secondary></indexterm>
<para><computeroutput><link linkend="_class_vector3">Vector3</link>&lt;double&gt; Matrix3::plane_normal (<link linkend="_class_vector3">Vector3</link>&lt; double &gt; &amp; b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 354 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1a3abd44212c958287a8512bb420dd530d"/>    <section>
    <title>plane_normal()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>plane_normal</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>plane_normal</secondary></indexterm>
<para><computeroutput><link linkend="_class_vector3">Vector3</link>&lt;double&gt; Matrix3::plane_normal (vector&lt; double &gt; &amp; b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 339 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1ad9d861341110840592e690dcdae5093d"/>    <section>
    <title>quaternion()</title>
<indexterm><primary>quaternion</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>quaternion</secondary></indexterm>
<para><computeroutput><link linkend="_class_quaternion">Quaternion</link> Matrix3::quaternion ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 129 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1aaeec44750f253901453a807e5dc24a4f"/>    <section>
    <title>rotation()</title>
<indexterm><primary>rotation</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>rotation</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix3">Matrix3</link> Matrix3::rotation (const <link linkend="_class_matrix3">Matrix3</link> &amp; mat)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 327 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1aeba055303cca65bb8d13d803d867675c"/>    <section>
    <title>singular_value_decomposition()</title>
<indexterm><primary>singular_value_decomposition</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>singular_value_decomposition</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix3">Matrix3</link> Matrix3::singular_value_decomposition ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 369 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1aa9158395d269ae2c6a73e6fb53c7d2fc"/>    <section>
    <title>tilt_angles()</title>
<indexterm><primary>tilt_angles</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>tilt_angles</secondary></indexterm>
<para><computeroutput>vector&lt;double&gt; Matrix3::tilt_angles ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 319 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1a8b1c3c83ced7d4181ba02cde4167b550"/>    <section>
    <title>trace()</title>
<indexterm><primary>trace</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>trace</secondary></indexterm>
<para><computeroutput>double Matrix3::trace ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 270 of file Matrix3.h.</para>
    </section><anchor xml:id="_class_matrix3_1ae8307ddf4869af1bbe08da25d9d5e1ee"/>    <section>
    <title>transpose()</title>
<indexterm><primary>transpose</primary><secondary>Matrix3</secondary></indexterm>
<indexterm><primary>Matrix3</primary><secondary>transpose</secondary></indexterm>
<para><computeroutput><link linkend="_class_matrix3">Matrix3</link> Matrix3::transpose ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 273 of file Matrix3.h.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
/Users/bernard/b20/bsoft/include/<link linkend="__matrix3_8h">Matrix3.h</link></section>
</section>
