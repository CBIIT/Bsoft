<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_quaternion" xml:lang="en-US">
<title>Quaternion Class Reference</title>
<indexterm><primary>Quaternion</primary></indexterm>
<para>
<computeroutput>#include &lt;Quaternion.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_quaternion_1abcc01358aada56ea5f0db4da18aaf77d">Quaternion</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_quaternion_1ab0be6eca24e8f9f432c571abb5f3ef41">Quaternion</link> (const double <link linkend="_class_quaternion_1a6d5f8f513510769cc83e08cea9ed93d3">scalar</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_quaternion_1ad5e1d56f88a2815fd3e372e7b4271ec0">Quaternion</link> (const double <link linkend="_class_quaternion_1a6d5f8f513510769cc83e08cea9ed93d3">scalar</link>, const double x, const double y, const double z)</para>
</listitem>
            <listitem><para><link linkend="_class_quaternion_1ab3b8862f9fd86c7ebb426b4940d08b39">Quaternion</link> (const <link linkend="_class_quaternion">Quaternion</link> &amp;q)</para>
</listitem>
            <listitem><para>template&lt;typename Type &gt; </para><para><link linkend="_class_quaternion_1a25ed00ded90bb2202f4662f8d969d035">Quaternion</link> (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp;vector)</para>
</listitem>
            <listitem><para>template&lt;typename Type &gt; </para><para><link linkend="_class_quaternion_1a4737271d7c44ed2b65071fc05d233fb6">Quaternion</link> (const double <link linkend="_class_quaternion_1a6d5f8f513510769cc83e08cea9ed93d3">scalar</link>, const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp;vector)</para>
</listitem>
            <listitem><para>template&lt;typename Type &gt; </para><para><link linkend="_class_quaternion_1a30fc2e4d7583fa32522e5fa1fa835a6e">Quaternion</link> (<link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp;<link linkend="_class_quaternion_1aec4a908fffea6b5192586b7ab7b568ce">axis</link>, double <link linkend="_class_quaternion_1aa947609ffab2610d3fbdde8b073a5568">angle</link>)</para>
</listitem>
            <listitem><para>template&lt;typename Type1 , typename Type2 &gt; </para><para><link linkend="_class_quaternion_1a7251bb94da677a58b53d2c7c4123a057">Quaternion</link> (<link linkend="_class_vector3">Vector3</link>&lt; Type1 &gt; &amp;from_vec, <link linkend="_class_vector3">Vector3</link>&lt; Type2 &gt; &amp;to_vec)</para>
</listitem>
            <listitem><para><link linkend="_class_quaternion">Quaternion</link> <link linkend="_class_quaternion_1ab41d6a3635b5e59b860a89f7025050f5">operator=</link> (const <link linkend="_class_quaternion">Quaternion</link> q)</para>
</listitem>
            <listitem><para><link linkend="_class_quaternion">Quaternion</link> <link linkend="_class_quaternion_1a48aa44d1d5ad7a2dc6d4edbe5fabc239">operator-</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_quaternion">Quaternion</link> <link linkend="_class_quaternion_1a24de151a4f78f5af5c2440a52895b47e">operator+=</link> (const <link linkend="_class_quaternion">Quaternion</link> &amp;q)</para>
</listitem>
            <listitem><para><link linkend="_class_quaternion">Quaternion</link> <link linkend="_class_quaternion_1a2cddd775b84eb1aa9a8d23024d0c5504">operator+</link> (const <link linkend="_class_quaternion">Quaternion</link> &amp;q)</para>
</listitem>
            <listitem><para><link linkend="_class_quaternion">Quaternion</link> <link linkend="_class_quaternion_1a3c0a498e1b9c72f25b74b14640b7faa4">operator-=</link> (const <link linkend="_class_quaternion">Quaternion</link> &amp;q)</para>
</listitem>
            <listitem><para><link linkend="_class_quaternion">Quaternion</link> <link linkend="_class_quaternion_1aa41e26d75de6904d9ad7088b2585635f">operator-</link> (const <link linkend="_class_quaternion">Quaternion</link> &amp;q)</para>
</listitem>
            <listitem><para><link linkend="_class_quaternion">Quaternion</link> <link linkend="_class_quaternion_1a2280d39f85bf81a09c9574c7cee9217b">operator*=</link> (const <link linkend="_class_quaternion">Quaternion</link> &amp;q)</para>
</listitem>
            <listitem><para><link linkend="_class_quaternion">Quaternion</link> <link linkend="_class_quaternion_1adf809588fed9d40d831a55df4594ec2c">operator*</link> (const <link linkend="_class_quaternion">Quaternion</link> &amp;q)</para>
</listitem>
            <listitem><para><link linkend="_class_quaternion">Quaternion</link> <link linkend="_class_quaternion_1af6185ddd1987e4a673fa6307dfce7b1a">operator/=</link> (const double d)</para>
</listitem>
            <listitem><para><link linkend="_class_quaternion">Quaternion</link> <link linkend="_class_quaternion_1aa6d2ee0e65cbf3259e7755d069d09407">operator/</link> (const double d)</para>
</listitem>
            <listitem><para>double &amp; <link linkend="_class_quaternion_1a10d0009b3f5ed41bf681fa90093f6151">operator[]</link> (long i)</para>
</listitem>
            <listitem><para>double <link linkend="_class_quaternion_1a6d5f8f513510769cc83e08cea9ed93d3">scalar</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_quaternion_1aa947609ffab2610d3fbdde8b073a5568">angle</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link>&lt; double &gt; <link linkend="_class_quaternion_1aec4a908fffea6b5192586b7ab7b568ce">axis</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_quaternion_1a52e6ae73d68a8a1e1065701f16d71f6a">norm</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_quaternion_1affb9192d394feb84c817eef94abf1602">norm2</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_quaternion_1a2cc10f25ec189318368299e5b67e8b66">normalize</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_quaternion">Quaternion</link> <link linkend="_class_quaternion_1a878ec5715266f1ed46abcbb0b49f36e9">conj</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_quaternion_1a25bae2279f5d2423a53606e04b44fb0f">invert</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_quaternion">Quaternion</link> <link linkend="_class_quaternion_1a5928af21cd48bf0a788cdaca8ccc8615">inverse</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_quaternion">Quaternion</link> <link linkend="_class_quaternion_1a8024b37be5b1f0f13349557dcfdb5a88">rotate</link> (const <link linkend="_class_quaternion">Quaternion</link> &amp;point)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line 25 of file Quaternion.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_quaternion_1abcc01358aada56ea5f0db4da18aaf77d"/>    <section>
    <title>Quaternion()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>Quaternion</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>Quaternion</secondary></indexterm>
<para><computeroutput>Quaternion::Quaternion ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 43 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1ab0be6eca24e8f9f432c571abb5f3ef41"/>    <section>
    <title>Quaternion()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>Quaternion</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>Quaternion</secondary></indexterm>
<para><computeroutput>Quaternion::Quaternion (const double scalar)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 44 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1ad5e1d56f88a2815fd3e372e7b4271ec0"/>    <section>
    <title>Quaternion()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>Quaternion</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>Quaternion</secondary></indexterm>
<para><computeroutput>Quaternion::Quaternion (const double scalar, const double x, const double y, const double z)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 47 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1ab3b8862f9fd86c7ebb426b4940d08b39"/>    <section>
    <title>Quaternion()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>Quaternion</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>Quaternion</secondary></indexterm>
<para><computeroutput>Quaternion::Quaternion (const <link linkend="_class_quaternion">Quaternion</link> &amp; q)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 51 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1a25ed00ded90bb2202f4662f8d969d035"/>    <section>
    <title>Quaternion()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>Quaternion</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>Quaternion</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>Quaternion::Quaternion (const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; vector)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 55 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1a4737271d7c44ed2b65071fc05d233fb6"/>    <section>
    <title>Quaternion()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>Quaternion</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>Quaternion</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>Quaternion::Quaternion (const double scalar, const <link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; vector)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 61 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1a30fc2e4d7583fa32522e5fa1fa835a6e"/>    <section>
    <title>Quaternion()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>Quaternion</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>Quaternion</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>Quaternion::Quaternion (<link linkend="_class_vector3">Vector3</link>&lt; Type &gt; &amp; axis, double angle)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 67 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1a7251bb94da677a58b53d2c7c4123a057"/>    <section>
    <title>Quaternion()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>Quaternion</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>Quaternion</secondary></indexterm>
<computeroutput>template&lt;typename Type1 , typename Type2 &gt; </computeroutput><para><computeroutput>Quaternion::Quaternion (<link linkend="_class_vector3">Vector3</link>&lt; Type1 &gt; &amp; from_vec, <link linkend="_class_vector3">Vector3</link>&lt; Type2 &gt; &amp; to_vec)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 71 of file Quaternion.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_quaternion_1aa947609ffab2610d3fbdde8b073a5568"/>    <section>
    <title>angle()</title>
<indexterm><primary>angle</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>angle</secondary></indexterm>
<para><computeroutput>double Quaternion::angle ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 143 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1aec4a908fffea6b5192586b7ab7b568ce"/>    <section>
    <title>axis()</title>
<indexterm><primary>axis</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>axis</secondary></indexterm>
<para><computeroutput><link linkend="_class_vector3">Vector3</link>&lt;double&gt; Quaternion::axis ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 144 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1a878ec5715266f1ed46abcbb0b49f36e9"/>    <section>
    <title>conj()</title>
<indexterm><primary>conj</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>conj</secondary></indexterm>
<para><computeroutput><link linkend="_class_quaternion">Quaternion</link> Quaternion::conj ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 160 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1a5928af21cd48bf0a788cdaca8ccc8615"/>    <section>
    <title>inverse()</title>
<indexterm><primary>inverse</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>inverse</secondary></indexterm>
<para><computeroutput><link linkend="_class_quaternion">Quaternion</link> Quaternion::inverse ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 168 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1a25bae2279f5d2423a53606e04b44fb0f"/>    <section>
    <title>invert()</title>
<indexterm><primary>invert</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>invert</secondary></indexterm>
<para><computeroutput>double Quaternion::invert ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 161 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1a52e6ae73d68a8a1e1065701f16d71f6a"/>    <section>
    <title>norm()</title>
<indexterm><primary>norm</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>norm</secondary></indexterm>
<para><computeroutput>double Quaternion::norm ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 149 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1affb9192d394feb84c817eef94abf1602"/>    <section>
    <title>norm2()</title>
<indexterm><primary>norm2</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>norm2</secondary></indexterm>
<para><computeroutput>double Quaternion::norm2 ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 150 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1a2cc10f25ec189318368299e5b67e8b66"/>    <section>
    <title>normalize()</title>
<indexterm><primary>normalize</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>normalize</secondary></indexterm>
<para><computeroutput>double Quaternion::normalize ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 151 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1adf809588fed9d40d831a55df4594ec2c"/>    <section>
    <title>operator*()</title>
<indexterm><primary>operator*</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>operator*</secondary></indexterm>
<para><computeroutput><link linkend="_class_quaternion">Quaternion</link> Quaternion::operator* (const <link linkend="_class_quaternion">Quaternion</link> &amp; q)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 117 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1a2280d39f85bf81a09c9574c7cee9217b"/>    <section>
    <title>operator*=()</title>
<indexterm><primary>operator*=</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>operator*=</secondary></indexterm>
<para><computeroutput><link linkend="_class_quaternion">Quaternion</link> Quaternion::operator*= (const <link linkend="_class_quaternion">Quaternion</link> &amp; q)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 113 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1a2cddd775b84eb1aa9a8d23024d0c5504"/>    <section>
    <title>operator+()</title>
<indexterm><primary>operator+</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_class_quaternion">Quaternion</link> Quaternion::operator+ (const <link linkend="_class_quaternion">Quaternion</link> &amp; q)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 101 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1a24de151a4f78f5af5c2440a52895b47e"/>    <section>
    <title>operator+=()</title>
<indexterm><primary>operator+=</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_class_quaternion">Quaternion</link> Quaternion::operator+= (const <link linkend="_class_quaternion">Quaternion</link> &amp; q)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 97 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1a48aa44d1d5ad7a2dc6d4edbe5fabc239"/>    <section>
    <title>operator-()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_class_quaternion">Quaternion</link> Quaternion::operator- ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 93 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1aa41e26d75de6904d9ad7088b2585635f"/>    <section>
    <title>operator-()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_class_quaternion">Quaternion</link> Quaternion::operator- (const <link linkend="_class_quaternion">Quaternion</link> &amp; q)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 109 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1a3c0a498e1b9c72f25b74b14640b7faa4"/>    <section>
    <title>operator-=()</title>
<indexterm><primary>operator-=</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>operator-=</secondary></indexterm>
<para><computeroutput><link linkend="_class_quaternion">Quaternion</link> Quaternion::operator-= (const <link linkend="_class_quaternion">Quaternion</link> &amp; q)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 105 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1aa6d2ee0e65cbf3259e7755d069d09407"/>    <section>
    <title>operator/()</title>
<indexterm><primary>operator/</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>operator/</secondary></indexterm>
<para><computeroutput><link linkend="_class_quaternion">Quaternion</link> Quaternion::operator/ (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 132 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1af6185ddd1987e4a673fa6307dfce7b1a"/>    <section>
    <title>operator/=()</title>
<indexterm><primary>operator/=</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>operator/=</secondary></indexterm>
<para><computeroutput><link linkend="_class_quaternion">Quaternion</link> Quaternion::operator/= (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 125 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1ab41d6a3635b5e59b860a89f7025050f5"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_quaternion">Quaternion</link> Quaternion::operator= (const <link linkend="_class_quaternion">Quaternion</link> q)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 89 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1a10d0009b3f5ed41bf681fa90093f6151"/>    <section>
    <title>operator[]()</title>
<indexterm><primary>operator[]</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput>double&amp; Quaternion::operator[] (long i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 137 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1a8024b37be5b1f0f13349557dcfdb5a88"/>    <section>
    <title>rotate()</title>
<indexterm><primary>rotate</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>rotate</secondary></indexterm>
<para><computeroutput><link linkend="_class_quaternion">Quaternion</link> Quaternion::rotate (const <link linkend="_class_quaternion">Quaternion</link> &amp; point)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 173 of file Quaternion.h.</para>
    </section><anchor xml:id="_class_quaternion_1a6d5f8f513510769cc83e08cea9ed93d3"/>    <section>
    <title>scalar()</title>
<indexterm><primary>scalar</primary><secondary>Quaternion</secondary></indexterm>
<indexterm><primary>Quaternion</primary><secondary>scalar</secondary></indexterm>
<para><computeroutput>double Quaternion::scalar ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 142 of file Quaternion.h.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
/Users/bernard/b20/bsoft/include/<link linkend="__quaternion_8h">Quaternion.h</link></section>
</section>
