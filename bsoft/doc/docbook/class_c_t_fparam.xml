<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_c_t_fparam" xml:lang="en-US">
<title>CTFparam Class Reference</title>
<indexterm><primary>CTFparam</primary></indexterm>
<para>
<computeroutput>#include &lt;ctf.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_c_t_fparam_1a2dcd304944d266214f93f73d0b4c2dd4">CTFparam</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_c_t_fparam_1a6467108b512f7840806aa180d93e5100">CTFparam</link> (double v, double sa, double ac)</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_t_fparam_1ade181f1c1b6f278feb1a66cac078a64c">update</link> (<link linkend="_class_c_t_fparam">CTFparam</link> *ctf)</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_t_fparam_1ab18d28d0b682a6ad0246d68d65ebd233">update</link> (<link linkend="_class_c_t_fparam">CTFparam</link> &amp;ctf)</para>

<para>Updates a CTF structure from another. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1a2ca8859944de2c203bcc4d8bb504982f">volt</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1ae00ada155a8dc2c10d18b584e1c3f1b6">volt</link> (double v)</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1ade58aaddc5f1f76b9f4d9a867b8eaf20">focal_length</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a93e97f795eeb9949599ca29df3c402e4">focal_length</link> (double v)</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1adb7d7950ee0c5ec1e362cd363741cae9">Cs</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a651717a0e0365a6b91b1578a225dc88a">Cs</link> (double v)</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1affc7e5a57013e935e5a5a125035d7331">Cc</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a95404e5ac1f7fc91dc5046dff03ad089">Cc</link> (double v)</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1a157be00f8f143c70b800847b644d455c">alpha</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a1de6a9c6f029bd62a46315b73b2fa33f">alpha</link> (double v)</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1a4810b94d02b97a2b91a521b1348a1961">dE</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a2dd16f5bdcd29648444b54cfeb503d6d">dE</link> (double v)</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1a3d481c54814262dd1ffe12f2a5f2ed80">amp_shift</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1aa8d48232b514b261d5ef7f031f7b8533">amp_shift</link> (double v)</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1a0a3dd779e4afd07fc62be0a8d0219032">objective_aperture</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a81107b0bb9eaf4f2a45c96a232d480ee">objective_aperture</link> (double v)</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1ac306ff77035bdae8acfdf41a2309d3f4">slit_width</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a4c03e153fdc563702430e4289e5eb585">slit_width</link> (double v)</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1a30d4b9680b0fd4f73b8ed4af36add184">defocus_average</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a3caccf96a809311a81fa96352c0bbcbe">defocus_average</link> (double v)</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1a54b1f2878541de9add5b2ab8b58c0a4c">defocus_deviation</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a76dc0298a44ea2912dfdb8112d32dc90">defocus_deviation</link> (double v)</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1a81fc51fbc0c4a6b52fa12de3197922ea">astigmatism_angle</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a8f430051d00b8063e318923de2e8250d">astigmatism_angle</link> (double v)</para>
</listitem>
            <listitem><para>long <link linkend="_class_c_t_fparam_1a877c7ed705b3657e815fc85cee3942ff">baseline_type</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a65793ee4af2506c0f9308d037cefa895">baseline_type</link> (long t)</para>
</listitem>
            <listitem><para>vector&lt; double &gt; &amp; <link linkend="_class_c_t_fparam_1acbdefeae68d3d44c5dbed7254e01459e">baseline</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1a0dcb8cf715a246cdec1fa92d1eaa3e40">baseline</link> (int i)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a623ac7bdf87eac36dfb47f35e97d1c19">baseline</link> (int i, double d)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a7204225364dc5c45058648d8e11b6f3a">baseline</link> (double *b)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a0e365cf64e3fa9c385d351ce8bcd0ad3">baseline</link> (vector&lt; double &gt; &amp;b)</para>
</listitem>
            <listitem><para>long <link linkend="_class_c_t_fparam_1ae6de44114f7799ef1cba7f162bec880b">envelope_type</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a859c2784f31cef4c352918125b2964f3">envelope_type</link> (long t)</para>
</listitem>
            <listitem><para>vector&lt; double &gt; &amp; <link linkend="_class_c_t_fparam_1a4fc6de84747a32009dfa00ef211bb65d">envelope</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1a977af6e81cc33ce5a7d2736567c47967">envelope</link> (int i)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a6568eeac806b4edea58050db461f28aa">envelope</link> (int i, double d)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a05ebe43e299ecd144c3501a91545171c">envelope</link> (double *v)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1ab448253e034ee4d45401a7c5bc933013">envelope</link> (vector&lt; double &gt; &amp;v)</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1a24e3fa0e756af0efe5396869cf8c7db6">fom</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a0ef59ec412d2576bf5de05930207826e">fom</link> (double v)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_c_t_fparam_1ac168e7a7ae5f568c47482bc60e5b93fc">check_defocus</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_c_t_fparam_1a9e8bbb56e431cb7f7492b919b7040f2e">check_Cs</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1a2c93bcb1c4743bfa1bffd4ad0a76a9a7">lambda</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1a075dc6414cc11791adf958b5bf8f1c81">frequency_cutoff</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1a8d890593b44c08b0f5d5f08b7cd89c71">term1</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1a5420f0880866cc8be90425374c8f29a9">term2</link> ()</para>
</listitem>
            <listitem><para>long double <link linkend="_class_c_t_fparam_1ac0be51f9dbe9ee868973ebd244076591">delta_phi</link> (double s2, double <link linkend="__vector3_8h_1a4d0ad562e2f2e87c018fe778805aa3cf">angle</link>)</para>
</listitem>
            <listitem><para>long double <link linkend="_class_c_t_fparam_1aad6ef4c0cb02dae29396fe428281bcee">calculate</link> (double s2, double <link linkend="__vector3_8h_1a4d0ad562e2f2e87c018fe778805aa3cf">angle</link>)</para>
</listitem>
            <listitem><para>vector&lt; double &gt; <link linkend="_class_c_t_fparam_1ab5cb20e8bbfd87427a62a29ad956b67c">calculate</link> (int nrad, int npsi, double step_size)</para>

<para>Calculates a CTF curve. </para>
</listitem>
            <listitem><para><link linkend="_class_complex">Complex</link>&lt; double &gt; <link linkend="_class_c_t_fparam_1ae7d5031b5c956103c635c7b8014efe28">calculate_complex</link> (double s2, double <link linkend="__vector3_8h_1a4d0ad562e2f2e87c018fe778805aa3cf">angle</link>)</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1af4d04a84ca0390253b0e4308d1d2504b">calc_baseline</link> (double s)</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1a864f594b9e049a405dc8201e1927b52a">calc_envelope</link> (double s)</para>
</listitem>
            <listitem><para>vector&lt; double &gt; <link linkend="_class_c_t_fparam_1a77ceddb0bdbd0ca7028ece9ffe6907e4">zeroes</link> (double max_s)</para>

<para>Calculates the zeroes of a CTF curve on the spatial frequency scale. </para>
</listitem>
            <listitem><para>vector&lt; double &gt; <link linkend="_class_c_t_fparam_1a6da83e8f53ffc40ca60704874e63947c">maxima</link> (double max_s)</para>

<para>Calculates the maxima of a CTF curve on the spatial frequency scale. </para>
</listitem>
            <listitem><para><link linkend="_class_bstring">Bstring</link> <link linkend="_class_c_t_fparam_1a94442e37fa57f83fedc8a46d9aa9b235">baseline_equation</link> ()</para>

<para>Generates a baseline equation string from 4 to 10 coefficients. </para>
</listitem>
            <listitem><para><link linkend="_class_bstring">Bstring</link> <link linkend="_class_c_t_fparam_1a72bd57e9651c92ce09d1c5cbb9aacfa7">envelope_equation</link> ()</para>

<para>Generates an envelope equation string from 4 coefficients. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_t_fparam_1a7c1cf8e96dd8dc3752fb01d001914bf5">parse_baseline_equation</link> (<link linkend="_class_bstring">Bstring</link> base_eq)</para>

<para>Extracts the coefficients from the baseline string. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_t_fparam_1a76706cd12928f1fefed68c2a0c32d2f6">parse_envelope_equation</link> (<link linkend="_class_bstring">Bstring</link> env_eq)</para>

<para>Extracts the coefficients from the envelope string. </para>
</listitem>
            <listitem><para>vector&lt; double &gt; <link linkend="_class_c_t_fparam_1a6f1f6f1cc1ba7ebcee0cc37b86222f79">envelope_partial_coherence</link> (long n, double freq_step)</para>

<para>Calculates the envelope curve based on partial coherence. </para>
</listitem>
            <listitem><para>vector&lt; double &gt; <link linkend="_class_c_t_fparam_1a6aa26f3febc645307027dd34e99e28ec">envelope_energy_spread</link> (long n, double freq_step)</para>

<para>Calculates the envelope curve based on energy spread. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1acec5be471cb9d7a8d3f731204f2d53d5">zero</link> (int i)</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_t_fparam_1ad7f0744c19026becdc1aaf3fd163bcd2">defocus_for_first_zero</link> (double s)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a1d1d3cc6f2b038cfcb4e33235d2ffbc4">show</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a0562d00dc3cef72fa33f65d3f2d4e6f9">show_baseline</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_t_fparam_1a7c6d1a4786f79bb1536a1e4d1cd409f8">show_envelope</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line 28 of file ctf.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_c_t_fparam_1a2dcd304944d266214f93f73d0b4c2dd4"/>    <section>
    <title>CTFparam()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>CTFparam</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>CTFparam</secondary></indexterm>
<para><computeroutput>CTFparam::CTFparam ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 76 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a6467108b512f7840806aa180d93e5100"/>    <section>
    <title>CTFparam()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>CTFparam</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>CTFparam</secondary></indexterm>
<para><computeroutput>CTFparam::CTFparam (double v, double sa, double ac)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 77 of file ctf.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_c_t_fparam_1a157be00f8f143c70b800847b644d455c"/>    <section>
    <title>alpha()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>alpha</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>alpha</secondary></indexterm>
<para><computeroutput>double CTFparam::alpha ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 95 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a1de6a9c6f029bd62a46315b73b2fa33f"/>    <section>
    <title>alpha()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>alpha</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>alpha</secondary></indexterm>
<para><computeroutput>void CTFparam::alpha (double v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 96 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a3d481c54814262dd1ffe12f2a5f2ed80"/>    <section>
    <title>amp_shift()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>amp_shift</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>amp_shift</secondary></indexterm>
<para><computeroutput>double CTFparam::amp_shift ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 99 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1aa8d48232b514b261d5ef7f031f7b8533"/>    <section>
    <title>amp_shift()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>amp_shift</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>amp_shift</secondary></indexterm>
<para><computeroutput>void CTFparam::amp_shift (double v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 100 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a81fc51fbc0c4a6b52fa12de3197922ea"/>    <section>
    <title>astigmatism_angle()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>astigmatism_angle</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>astigmatism_angle</secondary></indexterm>
<para><computeroutput>double CTFparam::astigmatism_angle ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 110 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a8f430051d00b8063e318923de2e8250d"/>    <section>
    <title>astigmatism_angle()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>astigmatism_angle</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>astigmatism_angle</secondary></indexterm>
<para><computeroutput>void CTFparam::astigmatism_angle (double v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 111 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1acbdefeae68d3d44c5dbed7254e01459e"/>    <section>
    <title>baseline()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>baseline</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>baseline</secondary></indexterm>
<para><computeroutput>vector&lt;double&gt;&amp; CTFparam::baseline ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 114 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a7204225364dc5c45058648d8e11b6f3a"/>    <section>
    <title>baseline()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>baseline</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>baseline</secondary></indexterm>
<para><computeroutput>void CTFparam::baseline (double * b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 117 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a0dcb8cf715a246cdec1fa92d1eaa3e40"/>    <section>
    <title>baseline()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>baseline</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>baseline</secondary></indexterm>
<para><computeroutput>double CTFparam::baseline (int i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 115 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a623ac7bdf87eac36dfb47f35e97d1c19"/>    <section>
    <title>baseline()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>baseline</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>baseline</secondary></indexterm>
<para><computeroutput>void CTFparam::baseline (int i, double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 116 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a0e365cf64e3fa9c385d351ce8bcd0ad3"/>    <section>
    <title>baseline()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>baseline</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>baseline</secondary></indexterm>
<para><computeroutput>void CTFparam::baseline (vector&lt; double &gt; &amp; b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 118 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a94442e37fa57f83fedc8a46d9aa9b235"/>    <section>
    <title>baseline_equation()</title>
<indexterm><primary>baseline_equation</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>baseline_equation</secondary></indexterm>
<para><computeroutput><link linkend="_class_bstring">Bstring</link> CTFparam::baseline_equation ( )</computeroutput></para><para>

<para>Generates a baseline equation string from 4 to 10 coefficients. </para>
</para>

<para><formalpara><title>Returns</title>

<para><link linkend="_class_bstring">Bstring</link> baseline equation. <literallayout><computeroutput>The baseline string is constructed from the 4 to 10 coefficients
according to the specified type.
</computeroutput></literallayout> </para>
</formalpara>
</para>
<para>
Definition at line 204 of file ctf.cpp.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a877c7ed705b3657e815fc85cee3942ff"/>    <section>
    <title>baseline_type()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>baseline_type</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>baseline_type</secondary></indexterm>
<para><computeroutput>long CTFparam::baseline_type ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 112 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a65793ee4af2506c0f9308d037cefa895"/>    <section>
    <title>baseline_type()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>baseline_type</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>baseline_type</secondary></indexterm>
<para><computeroutput>void CTFparam::baseline_type (long t)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 113 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1af4d04a84ca0390253b0e4308d1d2504b"/>    <section>
    <title>calc_baseline()</title>
<indexterm><primary>calc_baseline</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>calc_baseline</secondary></indexterm>
<para><computeroutput>double CTFparam::calc_baseline (double s)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 175 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a864f594b9e049a405dc8201e1927b52a"/>    <section>
    <title>calc_envelope()</title>
<indexterm><primary>calc_envelope</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>calc_envelope</secondary></indexterm>
<para><computeroutput>double CTFparam::calc_envelope (double s)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 203 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1aad6ef4c0cb02dae29396fe428281bcee"/>    <section>
    <title>calculate()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>calculate</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>calculate</secondary></indexterm>
<para><computeroutput>long double CTFparam::calculate (double s2, double angle)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 163 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1ab5cb20e8bbfd87427a62a29ad956b67c"/>    <section>
    <title>calculate()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>calculate</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>calculate</secondary></indexterm>
<para><computeroutput>vector&lt; double &gt; CTFparam::calculate (int nrad, int npsi, double step_size)</computeroutput></para><para>

<para>Calculates a CTF curve. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>nrad</entry>
                                <entry>
<para>number of radii. </para>
</entry>
                            </row>
                            <row>
                                <entry>npsi</entry>
                                <entry>
<para>number of angular segments. </para>
</entry>
                            </row>
                            <row>
                                <entry>step_size</entry>
                                <entry>
<para>reciprocal space step size (1/angstrom). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>vector&lt;double&gt; new CTF array. <literallayout><computeroutput>Defocus values are positive for underfocus.
Functions:
    angle = atan(y/x)
    s2 = reciprocal space distance squared
    defocus_average = (defocus_max + defocus_min)/2
    defocus_deviation = (defocus_max - defocus_min)/2
    defocus = defocus_average + defocus_deviation*cos(2*(angle - astigmatism_angle))
    phase = 0.5*PI*lambda*lambda*lambda*Cs*s2*s2 - PI*lambda*defocus*s2 - amp_shift;
    CTF = sin(phase)
The new CTF curve is returned.
</computeroutput></literallayout> </para>
</formalpara>
</para>
<para>
Definition at line 69 of file ctf.cpp.</para>
    </section><anchor xml:id="_class_c_t_fparam_1ae7d5031b5c956103c635c7b8014efe28"/>    <section>
    <title>calculate_complex()</title>
<indexterm><primary>calculate_complex</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>calculate_complex</secondary></indexterm>
<para><computeroutput><link linkend="_class_complex">Complex</link>&lt;double&gt; CTFparam::calculate_complex (double s2, double angle)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 170 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1affc7e5a57013e935e5a5a125035d7331"/>    <section>
    <title>Cc()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Cc</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>Cc</secondary></indexterm>
<para><computeroutput>double CTFparam::Cc ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 93 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a95404e5ac1f7fc91dc5046dff03ad089"/>    <section>
    <title>Cc()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Cc</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>Cc</secondary></indexterm>
<para><computeroutput>void CTFparam::Cc (double v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 94 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a9e8bbb56e431cb7f7492b919b7040f2e"/>    <section>
    <title>check_Cs()</title>
<indexterm><primary>check_Cs</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>check_Cs</secondary></indexterm>
<para><computeroutput>bool CTFparam::check_Cs ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 137 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1ac168e7a7ae5f568c47482bc60e5b93fc"/>    <section>
    <title>check_defocus()</title>
<indexterm><primary>check_defocus</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>check_defocus</secondary></indexterm>
<para><computeroutput>bool CTFparam::check_defocus ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 129 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1adb7d7950ee0c5ec1e362cd363741cae9"/>    <section>
    <title>Cs()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Cs</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>Cs</secondary></indexterm>
<para><computeroutput>double CTFparam::Cs ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 91 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a651717a0e0365a6b91b1578a225dc88a"/>    <section>
    <title>Cs()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Cs</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>Cs</secondary></indexterm>
<para><computeroutput>void CTFparam::Cs (double v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 92 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a4810b94d02b97a2b91a521b1348a1961"/>    <section>
    <title>dE()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>dE</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>dE</secondary></indexterm>
<para><computeroutput>double CTFparam::dE ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 97 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a2dd16f5bdcd29648444b54cfeb503d6d"/>    <section>
    <title>dE()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>dE</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>dE</secondary></indexterm>
<para><computeroutput>void CTFparam::dE (double v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 98 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a30d4b9680b0fd4f73b8ed4af36add184"/>    <section>
    <title>defocus_average()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>defocus_average</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>defocus_average</secondary></indexterm>
<para><computeroutput>double CTFparam::defocus_average ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 106 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a3caccf96a809311a81fa96352c0bbcbe"/>    <section>
    <title>defocus_average()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>defocus_average</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>defocus_average</secondary></indexterm>
<para><computeroutput>void CTFparam::defocus_average (double v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 107 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a54b1f2878541de9add5b2ab8b58c0a4c"/>    <section>
    <title>defocus_deviation()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>defocus_deviation</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>defocus_deviation</secondary></indexterm>
<para><computeroutput>double CTFparam::defocus_deviation ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 108 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a76dc0298a44ea2912dfdb8112d32dc90"/>    <section>
    <title>defocus_deviation()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>defocus_deviation</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>defocus_deviation</secondary></indexterm>
<para><computeroutput>void CTFparam::defocus_deviation (double v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 109 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1ad7f0744c19026becdc1aaf3fd163bcd2"/>    <section>
    <title>defocus_for_first_zero()</title>
<indexterm><primary>defocus_for_first_zero</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>defocus_for_first_zero</secondary></indexterm>
<para><computeroutput>double CTFparam::defocus_for_first_zero (double s)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 247 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1ac0be51f9dbe9ee868973ebd244076591"/>    <section>
    <title>delta_phi()</title>
<indexterm><primary>delta_phi</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>delta_phi</secondary></indexterm>
<para><computeroutput>long double CTFparam::delta_phi (double s2, double angle)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 155 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a4fc6de84747a32009dfa00ef211bb65d"/>    <section>
    <title>envelope()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>envelope</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>envelope</secondary></indexterm>
<para><computeroutput>vector&lt;double&gt;&amp; CTFparam::envelope ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 121 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a05ebe43e299ecd144c3501a91545171c"/>    <section>
    <title>envelope()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>envelope</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>envelope</secondary></indexterm>
<para><computeroutput>void CTFparam::envelope (double * v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 124 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a977af6e81cc33ce5a7d2736567c47967"/>    <section>
    <title>envelope()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>envelope</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>envelope</secondary></indexterm>
<para><computeroutput>double CTFparam::envelope (int i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 122 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a6568eeac806b4edea58050db461f28aa"/>    <section>
    <title>envelope()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>envelope</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>envelope</secondary></indexterm>
<para><computeroutput>void CTFparam::envelope (int i, double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 123 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1ab448253e034ee4d45401a7c5bc933013"/>    <section>
    <title>envelope()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>envelope</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>envelope</secondary></indexterm>
<para><computeroutput>void CTFparam::envelope (vector&lt; double &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 125 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a6aa26f3febc645307027dd34e99e28ec"/>    <section>
    <title>envelope_energy_spread()</title>
<indexterm><primary>envelope_energy_spread</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>envelope_energy_spread</secondary></indexterm>
<para><computeroutput>vector&lt; double &gt; CTFparam::envelope_energy_spread (long n, double freq_step)</computeroutput></para><para>

<para>Calculates the envelope curve based on energy spread. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>n</entry>
                                <entry>
<para>number of spatial frequency steps. </para>
</entry>
                            </row>
                            <row>
                                <entry>freq_step</entry>
                                <entry>
<para>size of spatial frequency step. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>vector&lt;double&gt; curve.</para>
</formalpara>
The curve is calculated at frequency s as: Ees(s) = exp(-0.5*(pi*lambda*Cc*(dE/V)*s^2)^2) where Cc: Chromatic aberation (~2e7 A) dE: Energy spread (~1 eV) V: Acceleration voltage (~1e5 V) lamda: electron wavelength (~0.03 A)</para>

<para>References: Freitag et al. (2005) Ultramicroscopy 102, 209-14. Zhu et al. (1997) JSB 118, 197-219. </para>
<para>
Definition at line 420 of file ctf.cpp.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a72bd57e9651c92ce09d1c5cbb9aacfa7"/>    <section>
    <title>envelope_equation()</title>
<indexterm><primary>envelope_equation</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>envelope_equation</secondary></indexterm>
<para><computeroutput><link linkend="_class_bstring">Bstring</link> CTFparam::envelope_equation ( )</computeroutput></para><para>

<para>Generates an envelope equation string from 4 coefficients. </para>
</para>

<para><formalpara><title>Returns</title>

<para><link linkend="_class_bstring">Bstring</link> envelope equation. <literallayout><computeroutput>The envelope string is constructed from the 4 double gaussian parameters.
</computeroutput></literallayout> </para>
</formalpara>
</para>
<para>
Definition at line 248 of file ctf.cpp.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a6f1f6f1cc1ba7ebcee0cc37b86222f79"/>    <section>
    <title>envelope_partial_coherence()</title>
<indexterm><primary>envelope_partial_coherence</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>envelope_partial_coherence</secondary></indexterm>
<para><computeroutput>vector&lt; double &gt; CTFparam::envelope_partial_coherence (long n, double freq_step)</computeroutput></para><para>

<para>Calculates the envelope curve based on partial coherence. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>n</entry>
                                <entry>
<para>number of spatial frequency steps. </para>
</entry>
                            </row>
                            <row>
                                <entry>freq_step</entry>
                                <entry>
<para>size of spatial frequency step. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>vector&lt;double&gt; curve.</para>
</formalpara>
The curve is calculated at frequency s as: Epc(s) = exp(-(pi*alpha*(Cs*lamda^2*s^2 - def)*s)^2) where Cs: Spherical aberation (~2e7 A) alpha: Beam spread/source size (~0.1 mrad) def: Defocus (~1e4 A) lamda: electron wavelength (~0.03 A)</para>

<para>References: Zhu et al. (1997) JSB 118, 197-219. </para>
<para>
Definition at line 386 of file ctf.cpp.</para>
    </section><anchor xml:id="_class_c_t_fparam_1ae6de44114f7799ef1cba7f162bec880b"/>    <section>
    <title>envelope_type()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>envelope_type</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>envelope_type</secondary></indexterm>
<para><computeroutput>long CTFparam::envelope_type ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 119 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a859c2784f31cef4c352918125b2964f3"/>    <section>
    <title>envelope_type()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>envelope_type</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>envelope_type</secondary></indexterm>
<para><computeroutput>void CTFparam::envelope_type (long t)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 120 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1ade58aaddc5f1f76b9f4d9a867b8eaf20"/>    <section>
    <title>focal_length()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>focal_length</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>focal_length</secondary></indexterm>
<para><computeroutput>double CTFparam::focal_length ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 89 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a93e97f795eeb9949599ca29df3c402e4"/>    <section>
    <title>focal_length()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>focal_length</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>focal_length</secondary></indexterm>
<para><computeroutput>void CTFparam::focal_length (double v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 90 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a24e3fa0e756af0efe5396869cf8c7db6"/>    <section>
    <title>fom()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>fom</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>fom</secondary></indexterm>
<para><computeroutput>double CTFparam::fom ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 126 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a0ef59ec412d2576bf5de05930207826e"/>    <section>
    <title>fom()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>fom</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>fom</secondary></indexterm>
<para><computeroutput>void CTFparam::fom (double v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 127 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a075dc6414cc11791adf958b5bf8f1c81"/>    <section>
    <title>frequency_cutoff()</title>
<indexterm><primary>frequency_cutoff</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>frequency_cutoff</secondary></indexterm>
<para><computeroutput>double CTFparam::frequency_cutoff ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 150 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a2c93bcb1c4743bfa1bffd4ad0a76a9a7"/>    <section>
    <title>lambda()</title>
<indexterm><primary>lambda</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>lambda</secondary></indexterm>
<para><computeroutput>double CTFparam::lambda ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 145 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a6da83e8f53ffc40ca60704874e63947c"/>    <section>
    <title>maxima()</title>
<indexterm><primary>maxima</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>maxima</secondary></indexterm>
<para><computeroutput>vector&lt; double &gt; CTFparam::maxima (double max_s)</computeroutput></para><para>

<para>Calculates the maxima of a CTF curve on the spatial frequency scale. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>max_s</entry>
                                <entry>
<para>maximum spatial frequency. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>vector&lt;double&gt; array of spatial frequencies for maxima, NULL on error. <literallayout><computeroutput>Thus uses the zeroes function to find the maxima.
Defocus values are positive for underfocus.
The array returned start with the first zero at index 0.
</computeroutput></literallayout> </para>
</formalpara>
</para>
<para>
Definition at line 177 of file ctf.cpp.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a0a3dd779e4afd07fc62be0a8d0219032"/>    <section>
    <title>objective_aperture()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>objective_aperture</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>objective_aperture</secondary></indexterm>
<para><computeroutput>double CTFparam::objective_aperture ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 102 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a81107b0bb9eaf4f2a45c96a232d480ee"/>    <section>
    <title>objective_aperture()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>objective_aperture</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>objective_aperture</secondary></indexterm>
<para><computeroutput>void CTFparam::objective_aperture (double v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 103 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a7c1cf8e96dd8dc3752fb01d001914bf5"/>    <section>
    <title>parse_baseline_equation()</title>
<indexterm><primary>parse_baseline_equation</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>parse_baseline_equation</secondary></indexterm>
<para><computeroutput>int CTFparam::parse_baseline_equation (<link linkend="_class_bstring">Bstring</link> base_eq)</computeroutput></para><para>

<para>Extracts the coefficients from the baseline string. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>base_eq</entry>
                                <entry>
<para>baseline equation string. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>int equation type. <literallayout><computeroutput>The baseline string is scanned in one of the three supported formats.
</computeroutput></literallayout> </para>
</formalpara>
</para>
<para>
Definition at line 281 of file ctf.cpp.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a76706cd12928f1fefed68c2a0c32d2f6"/>    <section>
    <title>parse_envelope_equation()</title>
<indexterm><primary>parse_envelope_equation</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>parse_envelope_equation</secondary></indexterm>
<para><computeroutput>int CTFparam::parse_envelope_equation (<link linkend="_class_bstring">Bstring</link> env_eq)</computeroutput></para><para>

<para>Extracts the coefficients from the envelope string. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>env_eq</entry>
                                <entry>
<para>envelope equation string. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>int 0. <literallayout><computeroutput>The envelope string is scanned to get the 4 double gaussian parameters.
</computeroutput></literallayout> </para>
</formalpara>
</para>
<para>
Definition at line 330 of file ctf.cpp.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a1d1d3cc6f2b038cfcb4e33235d2ffbc4"/>    <section>
    <title>show()</title>
<indexterm><primary>show</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>show</secondary></indexterm>
<para><computeroutput>void CTFparam::show ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 252 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a0562d00dc3cef72fa33f65d3f2d4e6f9"/>    <section>
    <title>show_baseline()</title>
<indexterm><primary>show_baseline</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>show_baseline</secondary></indexterm>
<para><computeroutput>void CTFparam::show_baseline ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 267 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a7c6d1a4786f79bb1536a1e4d1cd409f8"/>    <section>
    <title>show_envelope()</title>
<indexterm><primary>show_envelope</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>show_envelope</secondary></indexterm>
<para><computeroutput>void CTFparam::show_envelope ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 290 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1ac306ff77035bdae8acfdf41a2309d3f4"/>    <section>
    <title>slit_width()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>slit_width</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>slit_width</secondary></indexterm>
<para><computeroutput>double CTFparam::slit_width ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 104 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a4c03e153fdc563702430e4289e5eb585"/>    <section>
    <title>slit_width()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>slit_width</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>slit_width</secondary></indexterm>
<para><computeroutput>void CTFparam::slit_width (double v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 105 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a8d890593b44c08b0f5d5f08b7cd89c71"/>    <section>
    <title>term1()</title>
<indexterm><primary>term1</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>term1</secondary></indexterm>
<para><computeroutput>double CTFparam::term1 ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 153 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a5420f0880866cc8be90425374c8f29a9"/>    <section>
    <title>term2()</title>
<indexterm><primary>term2</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>term2</secondary></indexterm>
<para><computeroutput>double CTFparam::term2 ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 154 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1ab18d28d0b682a6ad0246d68d65ebd233"/>    <section>
    <title>update()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>update</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>update</secondary></indexterm>
<para><computeroutput>int CTFparam::update (<link linkend="_class_c_t_fparam">CTFparam</link> &amp; ctf)</computeroutput></para><para>

<para>Updates a CTF structure from another. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ctf</entry>
                                <entry>
<para>CTF structure with new information. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>int 0, &lt;0 on error. </para>
</formalpara>
</para>
<para>
Definition at line 20 of file ctf.cpp.</para>
    </section><anchor xml:id="_class_c_t_fparam_1ade181f1c1b6f278feb1a66cac078a64c"/>    <section>
    <title>update()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>update</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>update</secondary></indexterm>
<para><computeroutput>int CTFparam::update (<link linkend="_class_c_t_fparam">CTFparam</link> * ctf)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 81 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a2ca8859944de2c203bcc4d8bb504982f"/>    <section>
    <title>volt()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>volt</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>volt</secondary></indexterm>
<para><computeroutput>double CTFparam::volt ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 87 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1ae00ada155a8dc2c10d18b584e1c3f1b6"/>    <section>
    <title>volt()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>volt</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>volt</secondary></indexterm>
<para><computeroutput>void CTFparam::volt (double v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 88 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1acec5be471cb9d7a8d3f731204f2d53d5"/>    <section>
    <title>zero()</title>
<indexterm><primary>zero</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>zero</secondary></indexterm>
<para><computeroutput>double CTFparam::zero (int i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 233 of file ctf.h.</para>
    </section><anchor xml:id="_class_c_t_fparam_1a77ceddb0bdbd0ca7028ece9ffe6907e4"/>    <section>
    <title>zeroes()</title>
<indexterm><primary>zeroes</primary><secondary>CTFparam</secondary></indexterm>
<indexterm><primary>CTFparam</primary><secondary>zeroes</secondary></indexterm>
<para><computeroutput>vector&lt; double &gt; CTFparam::zeroes (double max_s)</computeroutput></para><para>

<para>Calculates the zeroes of a CTF curve on the spatial frequency scale. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>max_s</entry>
                                <entry>
<para>maximum spatial frequency. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>vector&lt;double&gt; array of spatial frequencies for zeroes, NULL on error. <literallayout><computeroutput>The nth zero is given by the reciprocal space distance where the
phase shift term is equal to -n*PI:
phase = 0.5*PI*lambda^3*Cs*s^4 - PI*lambda*defocus*s^2 = -n*PI
ctf_fz = defocus/(Cs*lambda^2)
zero(n) = sqrt(ctf_fz - sqrt(ctf_fz^2 - 2.0*n/(Cs*lambda^3)))
Defocus values are positive for underfocus.
The array returned start with the first zero at index 0.
</computeroutput></literallayout> </para>
</formalpara>
</para>
<para>
Definition at line 117 of file ctf.cpp.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
/Users/bernard/b20/bsoft/include/<link linkend="_ctf_8h">ctf.h</link>/Users/bernard/b20/bsoft/src/util/<link linkend="_ctf_8cpp">ctf.cpp</link></section>
</section>
