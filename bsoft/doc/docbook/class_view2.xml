<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_view2" xml:lang="en-US">
<title>View2&lt; Type &gt; Class Template Reference</title>
<indexterm><primary>View2&lt; Type &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;View2.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_view2_1a94b5fb5a7398c5c2371751b0c81f3760">View2</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_view2_1a8a79f56a61451c89748d6df5c400dd06">View2</link> (const <link linkend="_class_view2">View2</link> &amp;view)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_class_view2_1adb1d2c2829d83c66d86261a6b0718f10">View2</link> (<link linkend="_class_vector3">Vector3</link>&lt; T &gt; &amp;vec)</para>
</listitem>
            <listitem><para><link linkend="_class_view2_1a5ff6e0810cf5ca33dbc5bcccae1ae4e7">View2</link> (vector&lt; double &gt; &amp;vec)</para>
</listitem>
            <listitem><para><link linkend="_class_view2_1a50b132e77f499dd1c6183c645f27c3eb">View2</link> (const double <link linkend="_class_view2_1a598777d1670256b1eab8c2788c25a23b">x</link>, const double <link linkend="_class_view2_1a18251bf509ac913e92a638b6624bcd2b">y</link>, const double <link linkend="_class_view2_1a767f0890625d57aba4524992499aeb61">z</link>, const double <link linkend="_class_view2_1a53de3250068c26829b99d88007399404">angle</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_view2_1a856c07127e505b5fb9b49a248b2ee4be">View2</link> (<link linkend="_class_quaternion">Quaternion</link> &amp;q)</para>
</listitem>
            <listitem><para><link linkend="_class_view2_1a88d7512ac66af46ed7d82f0192d5a936">View2</link> (<link linkend="_class_matrix3">Matrix3</link> m)</para>
</listitem>
            <listitem><para><link linkend="_class_view2_1ac0e529093cc65078687854f9fc720e8c">View2</link> (double tilt, double axis)</para>
</listitem>
            <listitem><para><link linkend="_class_view2_1aa1ecc111064093df313945b365e71fcd">View2</link> (double <link linkend="_class_view2_1a53de3250068c26829b99d88007399404">angle</link>, <link linkend="_class_vector3">Vector3</link>&lt; double &gt; axis)</para>
</listitem>
            <listitem><para>template&lt;typename T2 &gt; </para><para><link linkend="_class_view2_1a7be115c54b380b128683b9712b691825">operator View2&lt; T2 &gt;</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class_view2">View2</link> <link linkend="_class_view2_1a3c161774b3ad22f2c94ab19ed39bf2e7">operator=</link> (const <link linkend="_class_view2">View2</link> &amp;view)</para>
</listitem>
            <listitem><para><link linkend="_class_view2">View2</link> <link linkend="_class_view2_1a8cd2f685675733ae29fc0fd77d885a89">operator=</link> (const vector&lt; double &gt; &amp;vec)</para>
</listitem>
            <listitem><para><link linkend="_class_view2">View2</link> <link linkend="_class_view2_1a9cfece60c2b50cce700442d492686dc4">operator-</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_view2_1a8af17dc7a35b14d38d3b94de0de7cb8a">operator==</link> (const <link linkend="_class_view2">View2</link> &amp;view)</para>
</listitem>
            <listitem><para>Type &amp; <link linkend="_class_view2_1ac4a3d3707655a4931257432f834dc05e">operator[]</link> (size_t i)</para>
</listitem>
            <listitem><para>double <link linkend="_class_view2_1a598777d1670256b1eab8c2788c25a23b">x</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_view2_1a18251bf509ac913e92a638b6624bcd2b">y</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_view2_1a767f0890625d57aba4524992499aeb61">z</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_view2_1a53de3250068c26829b99d88007399404">angle</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_view2_1a4622778c2ea8e6271a1d6d1e32d144a4">x</link> (const double d)</para>
</listitem>
            <listitem><para>void <link linkend="_class_view2_1a4eacdea22d6905b492ab52de9d0ff997">y</link> (const double d)</para>
</listitem>
            <listitem><para>void <link linkend="_class_view2_1aeec38ce839c8ff56d31d696a92d5fe6c">z</link> (const double d)</para>
</listitem>
            <listitem><para>void <link linkend="_class_view2_1a5d8b3a07fd6b4c1fe74de9716a7f2aba">angle</link> (const double d)</para>
</listitem>
            <listitem><para>vector&lt; double &gt; <link linkend="_class_view2_1a5c6394bcafcaaa84e50c421da4d7beac">array</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_view2_1a424af717547d6713c82bcfe215671c9a">vector_size</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_view2_1a937176dcd2651378b8e9c978a72d4b5a">normalize</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_view2_1a0b6055cfc7edbac49277d2b2c6096575">negate</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_view2">View2</link> <link linkend="_class_view2_1ab7ca0601335aa011b00ee5d140796267">backward</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_vector3">Vector3</link>&lt; double &gt; <link linkend="_class_view2_1a7b7941c4abd7531ecc5b1c2b1842fe65">vector3</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_quaternion">Quaternion</link> <link linkend="_class_view2_1a46d4f6f854aa662e9bac8f09aaa11346">quaternion</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_view2_1a54f707751c1de4fb4480471b7317ded2">matrix</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_view2_1a3669c77476415dd32f00e934a6b2c58d">random_view</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_view2_1a165ff0ab8b1ec11246fb67a9bb487b85">distance</link> (const <link linkend="_class_view2">View2</link> &amp;view)</para>
</listitem>
            <listitem><para>double <link linkend="_class_view2_1ac837257e98850da7a7f6fee3dafe63e9">angle</link> (const <link linkend="_class_view2">View2</link> &amp;view)</para>
</listitem>
            <listitem><para>double <link linkend="_class_view2_1aa99868ffaa0bbc80605687c1001cee96">residual</link> (const <link linkend="_class_view2">View2</link> &amp;view)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Type&gt;
class View2&lt; Type &gt;</title></simplesect>

<para>
Definition at line 27 of file View2.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_view2_1a94b5fb5a7398c5c2371751b0c81f3760"/>    <section>
    <title>View2()<computeroutput>[1/9]</computeroutput></title>
<indexterm><primary>View2</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>View2</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_view2">View2</link>&lt; Type &gt;::<link linkend="_class_view2">View2</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 37 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a8a79f56a61451c89748d6df5c400dd06"/>    <section>
    <title>View2()<computeroutput>[2/9]</computeroutput></title>
<indexterm><primary>View2</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>View2</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_view2">View2</link>&lt; Type &gt;::<link linkend="_class_view2">View2</link> (const <link linkend="_class_view2">View2</link>&lt; Type &gt; &amp; view)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 38 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1adb1d2c2829d83c66d86261a6b0718f10"/>    <section>
    <title>View2()<computeroutput>[3/9]</computeroutput></title>
<indexterm><primary>View2</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>View2</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_class_view2">View2</link>&lt; Type &gt;::<link linkend="_class_view2">View2</link> (<link linkend="_class_vector3">Vector3</link>&lt; T &gt; &amp; vec)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 40 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a5ff6e0810cf5ca33dbc5bcccae1ae4e7"/>    <section>
    <title>View2()<computeroutput>[4/9]</computeroutput></title>
<indexterm><primary>View2</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>View2</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_view2">View2</link>&lt; Type &gt;::<link linkend="_class_view2">View2</link> (vector&lt; double &gt; &amp; vec)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 41 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a50b132e77f499dd1c6183c645f27c3eb"/>    <section>
    <title>View2()<computeroutput>[5/9]</computeroutput></title>
<indexterm><primary>View2</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>View2</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_view2">View2</link>&lt; Type &gt;::<link linkend="_class_view2">View2</link> (const double x, const double y, const double z, const double angle)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 45 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a856c07127e505b5fb9b49a248b2ee4be"/>    <section>
    <title>View2()<computeroutput>[6/9]</computeroutput></title>
<indexterm><primary>View2</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>View2</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_view2">View2</link>&lt; Type &gt;::<link linkend="_class_view2">View2</link> (<link linkend="_class_quaternion">Quaternion</link> &amp; q)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 50 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a88d7512ac66af46ed7d82f0192d5a936"/>    <section>
    <title>View2()<computeroutput>[7/9]</computeroutput></title>
<indexterm><primary>View2</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>View2</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_view2">View2</link>&lt; Type &gt;::<link linkend="_class_view2">View2</link> (<link linkend="_class_matrix3">Matrix3</link> m)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 62 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1ac0e529093cc65078687854f9fc720e8c"/>    <section>
    <title>View2()<computeroutput>[8/9]</computeroutput></title>
<indexterm><primary>View2</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>View2</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_view2">View2</link>&lt; Type &gt;::<link linkend="_class_view2">View2</link> (double tilt, double axis)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 66 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1aa1ecc111064093df313945b365e71fcd"/>    <section>
    <title>View2()<computeroutput>[9/9]</computeroutput></title>
<indexterm><primary>View2</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>View2</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_view2">View2</link>&lt; Type &gt;::<link linkend="_class_view2">View2</link> (double angle, <link linkend="_class_vector3">Vector3</link>&lt; double &gt; axis)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 70 of file View2.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_view2_1a53de3250068c26829b99d88007399404"/>    <section>
    <title>angle()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>angle</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>angle</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_view2">View2</link>&lt; Type &gt;::angle ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 99 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a5d8b3a07fd6b4c1fe74de9716a7f2aba"/>    <section>
    <title>angle()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>angle</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>angle</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>void <link linkend="_class_view2">View2</link>&lt; Type &gt;::angle (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 103 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1ac837257e98850da7a7f6fee3dafe63e9"/>    <section>
    <title>angle()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>angle</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>angle</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_view2">View2</link>&lt; Type &gt;::angle (const <link linkend="_class_view2">View2</link>&lt; Type &gt; &amp; view)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 171 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a5c6394bcafcaaa84e50c421da4d7beac"/>    <section>
    <title>array()</title>
<indexterm><primary>array</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>array</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>vector&lt;double&gt; <link linkend="_class_view2">View2</link>&lt; Type &gt;::array ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 104 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1ab7ca0601335aa011b00ee5d140796267"/>    <section>
    <title>backward()</title>
<indexterm><primary>backward</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>backward</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_view2">View2</link> <link linkend="_class_view2">View2</link>&lt; Type &gt;::backward ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 119 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a165ff0ab8b1ec11246fb67a9bb487b85"/>    <section>
    <title>distance()</title>
<indexterm><primary>distance</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>distance</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_view2">View2</link>&lt; Type &gt;::distance (const <link linkend="_class_view2">View2</link>&lt; Type &gt; &amp; view)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 167 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a54f707751c1de4fb4480471b7317ded2"/>    <section>
    <title>matrix()</title>
<indexterm><primary>matrix</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>matrix</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_matrix3">Matrix3</link> <link linkend="_class_view2">View2</link>&lt; Type &gt;::matrix ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 154 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a0b6055cfc7edbac49277d2b2c6096575"/>    <section>
    <title>negate()</title>
<indexterm><primary>negate</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>negate</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>void <link linkend="_class_view2">View2</link>&lt; Type &gt;::negate ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 118 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a937176dcd2651378b8e9c978a72d4b5a"/>    <section>
    <title>normalize()</title>
<indexterm><primary>normalize</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>normalize</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_view2">View2</link>&lt; Type &gt;::normalize ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 110 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a7be115c54b380b128683b9712b691825"/>    <section>
    <title>operator View2&lt; T2 &gt;()</title>
<indexterm><primary>operator View2&lt; T2 &gt;</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>operator View2&lt; T2 &gt;</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><computeroutput>template&lt;typename T2 &gt; </computeroutput><para><computeroutput><link linkend="_class_view2">View2</link>&lt; Type &gt;::operator <link linkend="_class_view2">View2</link>&lt; T2 &gt; ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 75 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a9cfece60c2b50cce700442d492686dc4"/>    <section>
    <title>operator-()</title>
<indexterm><primary>operator-</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_view2">View2</link> <link linkend="_class_view2">View2</link>&lt; Type &gt;::operator- ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 88 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a8cd2f685675733ae29fc0fd77d885a89"/>    <section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_view2">View2</link> <link linkend="_class_view2">View2</link>&lt; Type &gt;::operator= (const vector&lt; double &gt; &amp; vec)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 82 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a3c161774b3ad22f2c94ab19ed39bf2e7"/>    <section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_view2">View2</link> <link linkend="_class_view2">View2</link>&lt; Type &gt;::operator= (const <link linkend="_class_view2">View2</link>&lt; Type &gt; &amp; view)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 78 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a8af17dc7a35b14d38d3b94de0de7cb8a"/>    <section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_view2">View2</link>&lt; Type &gt;::operator== (const <link linkend="_class_view2">View2</link>&lt; Type &gt; &amp; view)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 92 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1ac4a3d3707655a4931257432f834dc05e"/>    <section>
    <title>operator[]()</title>
<indexterm><primary>operator[]</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>Type&amp; <link linkend="_class_view2">View2</link>&lt; Type &gt;::operator[] (size_t i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 95 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a46d4f6f854aa662e9bac8f09aaa11346"/>    <section>
    <title>quaternion()</title>
<indexterm><primary>quaternion</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>quaternion</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_quaternion">Quaternion</link> <link linkend="_class_view2">View2</link>&lt; Type &gt;::quaternion ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 131 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a3669c77476415dd32f00e934a6b2c58d"/>    <section>
    <title>random_view()</title>
<indexterm><primary>random_view</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>random_view</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>void <link linkend="_class_view2">View2</link>&lt; Type &gt;::random_view ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 158 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1aa99868ffaa0bbc80605687c1001cee96"/>    <section>
    <title>residual()</title>
<indexterm><primary>residual</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>residual</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_view2">View2</link>&lt; Type &gt;::residual (const <link linkend="_class_view2">View2</link>&lt; Type &gt; &amp; view)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 177 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a7b7941c4abd7531ecc5b1c2b1842fe65"/>    <section>
    <title>vector3()</title>
<indexterm><primary>vector3</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>vector3</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput><link linkend="_class_vector3">Vector3</link>&lt;double&gt; <link linkend="_class_view2">View2</link>&lt; Type &gt;::vector3 ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 130 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a424af717547d6713c82bcfe215671c9a"/>    <section>
    <title>vector_size()</title>
<indexterm><primary>vector_size</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>vector_size</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_view2">View2</link>&lt; Type &gt;::vector_size ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 107 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a598777d1670256b1eab8c2788c25a23b"/>    <section>
    <title>x()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>x</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>x</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_view2">View2</link>&lt; Type &gt;::x ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 96 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a4622778c2ea8e6271a1d6d1e32d144a4"/>    <section>
    <title>x()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>x</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>x</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>void <link linkend="_class_view2">View2</link>&lt; Type &gt;::x (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 100 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a18251bf509ac913e92a638b6624bcd2b"/>    <section>
    <title>y()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>y</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>y</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_view2">View2</link>&lt; Type &gt;::y ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 97 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a4eacdea22d6905b492ab52de9d0ff997"/>    <section>
    <title>y()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>y</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>y</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>void <link linkend="_class_view2">View2</link>&lt; Type &gt;::y (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 101 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1a767f0890625d57aba4524992499aeb61"/>    <section>
    <title>z()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>z</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>z</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>double <link linkend="_class_view2">View2</link>&lt; Type &gt;::z ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 98 of file View2.h.</para>
    </section><anchor xml:id="_class_view2_1aeec38ce839c8ff56d31d696a92d5fe6c"/>    <section>
    <title>z()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>z</primary><secondary>View2&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>View2&lt; Type &gt;</primary><secondary>z</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>void <link linkend="_class_view2">View2</link>&lt; Type &gt;::z (const double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 102 of file View2.h.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
/Users/bernard/b20/bsoft/include/<link linkend="__view2_8h">View2.h</link></section>
</section>
